{
  "language": "Solidity",
  "sources": {
    "contracts/Faucet.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.6;\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\ninterface DSAuthority {\n    function canCall(\n        address src, address dst, bytes4 sig\n    ) external view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(address(0))) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\ninterface TokenLike {\n  function transfer(address dest, uint amt) external;\n}\n\ncontract Faucet is DSAuth() {\n\n  uint public maxpull;\n  TokenLike public token;\n  string public name;\n\n  function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    z = x > y ? y : x;\n  }\n\n  function _pullTo(address dest, uint amt) internal {\n    token.transfer(dest,min(amt,maxpull));\n  }\n\n  constructor(address _token, string memory _name, uint _maxpull) { \n    token = TokenLike(_token);\n    name = _name;\n    maxpull = _maxpull;\n  }\n\n  function pull(uint amt) external {\n    _pullTo(msg.sender,amt);\n  }\n\n  function pullTo(address dest, uint amt) external {\n    _pullTo(dest,amt);\n  }\n\n  function drainTo(address dest, uint amt) external auth {\n    token.transfer(dest, amt);\n  }\n\n  function setMaxpull(uint _maxpull) external auth {\n    maxpull = _maxpull;\n  }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}