{
  "address": "0x4F4Ce8BaD077788A8149Aab824208108eeB0aFDc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMangrove",
          "name": "mgv",
          "type": "address"
        },
        {
          "internalType": "contract IEIP20",
          "name": "base",
          "type": "address"
        },
        {
          "internalType": "contract IEIP20",
          "name": "quote",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "base_0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote_0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nslots",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price_incr",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IEIP20",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IEIP20",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "reason",
          "type": "bytes32"
        }
      ],
      "name": "LogIncident",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISourcer",
          "name": "",
          "type": "address"
        }
      ],
      "name": "SetLiquiditySourcer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "contract IEIP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MGV",
      "outputs": [
        {
          "internalType": "contract IMangrove",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NSLOTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFR_GASREQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUOTE",
      "outputs": [
        {
          "internalType": "contract IEIP20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_staticdelegatecall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEIP20",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveMangrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEIP20",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "contract IEIP20",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasreq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasprice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "getMissingProvision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "liveOnly",
          "type": "bool"
        }
      ],
      "name": "get_offers",
      "outputs": [
        {
          "internalType": "uint256[][2]",
          "name": "offers",
          "type": "uint256[][2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lastBidPosition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256[][2]",
          "name": "pivotIds",
          "type": "uint256[][2]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "is_paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity_sourcer",
      "outputs": [
        {
          "internalType": "contract ISourcer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "outbound_tkn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inbound_tkn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "t",
              "name": "offer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gives",
              "type": "uint256"
            },
            {
              "internalType": "t",
              "name": "offerDetail",
              "type": "uint256"
            },
            {
              "internalType": "t",
              "name": "global",
              "type": "uint256"
            },
            {
              "internalType": "t",
              "name": "local",
              "type": "uint256"
            }
          ],
          "internalType": "struct MgvLib.SingleOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "makerExecute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "ret",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "outbound_tkn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inbound_tkn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "t",
              "name": "offer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gives",
              "type": "uint256"
            },
            {
              "internalType": "t",
              "name": "offerDetail",
              "type": "uint256"
            },
            {
              "internalType": "t",
              "name": "global",
              "type": "uint256"
            },
            {
              "internalType": "t",
              "name": "local",
              "type": "uint256"
            }
          ],
          "internalType": "struct MgvLib.SingleOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "makerData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "mgvData",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MgvLib.OrderResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "name": "makerPosthook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IEIP20",
              "name": "outbound_tkn",
              "type": "address"
            },
            {
              "internalType": "contract IEIP20",
              "name": "inbound_tkn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "wants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gives",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasreq",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasprice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pivotId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOfferLogic.MakerOrder",
          "name": "mko",
          "type": "tuple"
        }
      ],
      "name": "newOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset_pending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEIP20",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "contract IEIP20",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deprovision",
          "type": "bool"
        }
      ],
      "name": "retractOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ba",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "retractOffers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collected",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasreq",
          "type": "uint256"
        }
      ],
      "name": "setGasreq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "set_EOA_sourcer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delta",
          "type": "uint256"
        }
      ],
      "name": "set_delta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISourcer",
          "name": "sourcer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasreq",
          "type": "uint256"
        }
      ],
      "name": "set_liquidity_sourcer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "m",
          "type": "uint256"
        }
      ],
      "name": "set_min_offer_type",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "s",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "withBase",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "set_shift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shift",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IEIP20",
              "name": "outbound_tkn",
              "type": "address"
            },
            {
              "internalType": "contract IEIP20",
              "name": "inbound_tkn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "wants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gives",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasreq",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasprice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pivotId",
              "type": "uint256"
            }
          ],
          "internalType": "struct IOfferLogic.MakerOrder",
          "name": "mko",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "updateOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromMangrove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEIP20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x39bee26bb030f1c2e23dba1d07c8b8289e3482def67788b08cb99fca6e88ef45",
  "receipt": {
    "to": null,
    "from": "0x47897EE61498D02B18794601Ed3A71896A1Ff894",
    "contractAddress": "0x4F4Ce8BaD077788A8149Aab824208108eeB0aFDc",
    "transactionIndex": 19,
    "gasUsed": "9678320",
    "logsBloom": "0x
    "blockHash": "0xb1283ba454cefba58fb55487163cf4dd95fb5d509daa9b8871d99d6e4090cd88",
    "transactionHash": "0x39bee26bb030f1c2e23dba1d07c8b8289e3482def67788b08cb99fca6e88ef45",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 26728847,
        "transactionHash": "0x39bee26bb030f1c2e23dba1d07c8b8289e3482def67788b08cb99fca6e88ef45",
        "address": "0xF61Cffd6071a8DB7cD5E8DF1D3A5450D9903cF1c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f4ce8bad077788a8149aab824208108eeb0afdc",
          "0x000000000000000000000000f3e339d8a0b989114412fa157cc846ebaf4bcbd8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 43,
        "blockHash": "0xb1283ba454cefba58fb55487163cf4dd95fb5d509daa9b8871d99d6e4090cd88"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 26728847,
        "transactionHash": "0x39bee26bb030f1c2e23dba1d07c8b8289e3482def67788b08cb99fca6e88ef45",
        "address": "0xC87385b5E62099f92d490750Fcd6C901a524BBcA",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004f4ce8bad077788a8149aab824208108eeb0afdc",
          "0x000000000000000000000000f3e339d8a0b989114412fa157cc846ebaf4bcbd8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 44,
        "blockHash": "0xb1283ba454cefba58fb55487163cf4dd95fb5d509daa9b8871d99d6e4090cd88"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 26728847,
        "transactionHash": "0x39bee26bb030f1c2e23dba1d07c8b8289e3482def67788b08cb99fca6e88ef45",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000047897ee61498d02b18794601ed3a71896a1ff894",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000407876c33689f700000000000000000000000000000000000000000000000011cf73a81edeb3ea5000000000000000000000000000000000000000000001aa294fec0a337cdd79c00000000000000000000000000000000000000000000000118efb315ba829f35000000000000000000000000000000000000000000001aa29906480f6b36770c",
        "logIndex": 45,
        "blockHash": "0xb1283ba454cefba58fb55487163cf4dd95fb5d509daa9b8871d99d6e4090cd88"
      }
    ],
    "blockNumber": 26728847,
    "cumulativeGasUsed": "11232912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF3e339d8a0B989114412fa157Cc846ebaf4BCbd8",
    "0xc87385b5e62099f92d490750fcd6c901a524bbca",
    "0xF61Cffd6071a8DB7cD5E8DF1D3A5450D9903cF1c",
    "1000000000000000000000",
    "997000000",
    100,
    "120000",
    "0x47897EE61498D02B18794601Ed3A71896A1Ff894"
  ],
  "numDeployments": 1,
  "solcInputHash": "620cb2f7d0a64f95a989ad821619c697",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMangrove\",\"name\":\"mgv\",\"type\":\"address\"},{\"internalType\":\"contract IEIP20\",\"name\":\"base\",\"type\":\"address\"},{\"internalType\":\"contract IEIP20\",\"name\":\"quote\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"base_0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote_0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nslots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_incr\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IEIP20\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IEIP20\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"reason\",\"type\":\"bytes32\"}],\"name\":\"LogIncident\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISourcer\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SetLiquiditySourcer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"contract IEIP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MGV\",\"outputs\":[{\"internalType\":\"contract IMangrove\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NSLOTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFR_GASREQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE\",\"outputs\":[{\"internalType\":\"contract IEIP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_staticdelegatecall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEIP20\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveMangrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEIP20\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"contract IEIP20\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"getMissingProvision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"liveOnly\",\"type\":\"bool\"}],\"name\":\"get_offers\",\"outputs\":[{\"internalType\":\"uint256[][2]\",\"name\":\"offers\",\"type\":\"uint256[][2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lastBidPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][2]\",\"name\":\"pivotIds\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_sourcer\",\"outputs\":[{\"internalType\":\"contract ISourcer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"t\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"},{\"internalType\":\"t\",\"name\":\"offerDetail\",\"type\":\"uint256\"},{\"internalType\":\"t\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"t\",\"name\":\"local\",\"type\":\"uint256\"}],\"internalType\":\"struct MgvLib.SingleOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"makerExecute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"ret\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"t\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"},{\"internalType\":\"t\",\"name\":\"offerDetail\",\"type\":\"uint256\"},{\"internalType\":\"t\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"t\",\"name\":\"local\",\"type\":\"uint256\"}],\"internalType\":\"struct MgvLib.SingleOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"makerData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mgvData\",\"type\":\"bytes32\"}],\"internalType\":\"struct MgvLib.OrderResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"name\":\"makerPosthook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IEIP20\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"contract IEIP20\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pivotId\",\"type\":\"uint256\"}],\"internalType\":\"struct IOfferLogic.MakerOrder\",\"name\":\"mko\",\"type\":\"tuple\"}],\"name\":\"newOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset_pending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEIP20\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"contract IEIP20\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deprovision\",\"type\":\"bool\"}],\"name\":\"retractOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ba\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"retractOffers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collected\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"}],\"name\":\"setGasreq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"set_EOA_sourcer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delta\",\"type\":\"uint256\"}],\"name\":\"set_delta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISourcer\",\"name\":\"sourcer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"}],\"name\":\"set_liquidity_sourcer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"m\",\"type\":\"uint256\"}],\"name\":\"set_min_offer_type\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"s\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"withBase\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"set_shift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shift\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IEIP20\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"contract IEIP20\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pivotId\",\"type\":\"uint256\"}],\"internalType\":\"struct IOfferLogic.MakerOrder\",\"name\":\"mko\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"updateOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromMangrove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEIP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"LogIncident(address,address,uint256,bytes32)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{\"approveMangrove(address,uint256)\":{\"notice\":\"`this` contract needs to approve Mangrove to let it perform outbound token transfer at the end of the `makerExecute` function NB if anyone can call this function someone could reset it to 0 for griefing\"},\"delta()\":{\"notice\":\"Setters and getters \"},\"set_liquidity_sourcer(address,uint256)\":{\"notice\":\"NB Sourcer might need further approval to work as intended\"},\"set_shift(int256,bool,uint256[])\":{\"notice\":\"New positions 0<= i < s are initialized with amount[i] in base tokens if `withBase`. In quote tokens otherwise\"},\"withdrawFromMangrove(address,uint256)\":{\"notice\":\"withdraws ETH from the bounty vault of the Mangrove. ETH are sent to `receiver`\"},\"withdrawToken(address,address,uint256)\":{\"notice\":\"transfers token stored in `this` contract to some recipient address\"}},\"notice\":\"In case of a partial fill of an offer at position i, the offer residual is reposted (see `Persistent` strat class)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Strategies/OfferLogics/SingleUser/Deployable/MarketMaking/Mango/Mango.sol\":\"Mango\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\n// IERC20.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* `MgvLib` contains data structures returned by external calls to Mangrove and the interfaces it uses for its own external calls. */\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address account) external view returns (uint);\\n\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint);\\n\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n\\n  /// for wETH contract\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xad0b3300c8afaba6562a533107fa9175dcecf13c0bebe24f05a84576eb80a5e6\",\"license\":\"Unlicense\"},\"contracts/MgvLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\n// MgvLib.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* `MgvLib` contains data structures returned by external calls to Mangrove and the interfaces it uses for its own external calls. */\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./preprocessed/MgvPack.post.sol\\\" as P;\\n\\n/* # Structs\\nThe structs defined in `structs.js` have their counterpart as solidity structs that are easy to manipulate for outside contracts / callers of view functions. */\\n\\nlibrary MgvLib {\\n  /*\\n   Some miscellaneous data types useful to `Mangrove` and external contracts */\\n  //+clear+\\n\\n  /* `SingleOrder` holds data about an order-offer match in a struct. Used by `marketOrder` and `internalSnipes` (and some of their nested functions) to avoid stack too deep errors. */\\n  struct SingleOrder {\\n    address outbound_tkn;\\n    address inbound_tkn;\\n    uint offerId;\\n    P.Offer.t offer;\\n    /* `wants`/`gives` mutate over execution. Initially the `wants`/`gives` from the taker's pov, then actual `wants`/`gives` adjusted by offer's price and volume. */\\n    uint wants;\\n    uint gives;\\n    /* `offerDetail` is only populated when necessary. */\\n    P.OfferDetail.t offerDetail;\\n    P.Global.t global;\\n    P.Local.t local;\\n  }\\n\\n  /* <a id=\\\"MgvLib/OrderResult\\\"></a> `OrderResult` holds additional data for the maker and is given to them _after_ they fulfilled an offer. It gives them their own returned data from the previous call, and an `mgvData` specifying whether the Mangrove encountered an error. */\\n\\n  struct OrderResult {\\n    /* `makerdata` holds a message that was either returned by the maker or passed as revert message at the end of the trade execution*/\\n    bytes32 makerData;\\n    /* `mgvData` is an [internal Mangrove status code](#MgvOfferTaking/statusCodes) code. */\\n    bytes32 mgvData;\\n  }\\n}\\n\\n/* # Events\\nThe events emitted for use by bots are listed here: */\\ncontract HasMgvEvents {\\n  /* * Emitted at the creation of the new Mangrove contract on the pair (`inbound_tkn`, `outbound_tkn`)*/\\n  event NewMgv();\\n\\n  /* Mangrove adds or removes wei from `maker`'s account */\\n  /* * Credit event occurs when an offer is removed from the Mangrove or when the `fund` function is called*/\\n  event Credit(address indexed maker, uint amount);\\n  /* * Debit event occurs when an offer is posted or when the `withdraw` function is called */\\n  event Debit(address indexed maker, uint amount);\\n\\n  /* * Mangrove reconfiguration */\\n  event SetActive(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    bool value\\n  );\\n  event SetFee(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint value\\n  );\\n  event SetGasbase(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offer_gasbase\\n  );\\n  event SetGovernance(address value);\\n  event SetMonitor(address value);\\n  event SetVault(address value);\\n  event SetUseOracle(bool value);\\n  event SetNotify(bool value);\\n  event SetGasmax(uint value);\\n  event SetDensity(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint value\\n  );\\n  event SetGasprice(uint value);\\n\\n  /* Market order execution */\\n  event OrderStart();\\n  event OrderComplete(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address indexed taker,\\n    uint takerGot,\\n    uint takerGave,\\n    uint penalty,\\n    uint feePaid\\n  );\\n\\n  /* * Offer execution */\\n  event OfferSuccess(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id,\\n    // `maker` is not logged because it can be retrieved from the state using `(outbound_tkn,inbound_tkn,id)`.\\n    address taker,\\n    uint takerWants,\\n    uint takerGives\\n  );\\n\\n  /* Log information when a trade execution reverts or returns a non empty bytes32 word */\\n  event OfferFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id,\\n    // `maker` is not logged because it can be retrieved from the state using `(outbound_tkn,inbound_tkn,id)`.\\n    address taker,\\n    uint takerWants,\\n    uint takerGives,\\n    // `mgvData` may only be `\\\"mgv/makerRevert\\\"`, `\\\"mgv/makerTransferFail\\\"` or `\\\"mgv/makerReceiveFail\\\"`\\n    bytes32 mgvData\\n  );\\n\\n  /* Log information when a posthook reverts */\\n  event PosthookFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offerId,\\n    bytes32 posthookData\\n  );\\n\\n  /* * After `permit` and `approve` */\\n  event Approval(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address owner,\\n    address spender,\\n    uint value\\n  );\\n\\n  /* * Mangrove closure */\\n  event Kill();\\n\\n  /* * An offer was created or updated.\\n  A few words about why we include a `prev` field, and why we don't include a\\n  `next` field: in theory clients should need neither `prev` nor a `next` field.\\n  They could just 1. Read the order book state at a given block `b`.  2. On\\n  every event, update a local copy of the orderbook.  But in practice, we do not\\n  want to force clients to keep a copy of the *entire* orderbook. There may be a\\n  long tail of spam. Now if they only start with the first $N$ offers and\\n  receive a new offer that goes to the end of the book, they cannot tell if\\n  there are missing offers between the new offer and the end of the local copy\\n  of the book.\\n  \\n  So we add a prev pointer so clients with only a prefix of the book can receive\\n  out-of-prefix offers and know what to do with them. The `next` pointer is an\\n  optimization useful in Solidity (we traverse fewer memory locations) but\\n  useless in client code.\\n  */\\n  event OfferWrite(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address maker,\\n    uint wants,\\n    uint gives,\\n    uint gasprice,\\n    uint gasreq,\\n    uint id,\\n    uint prev\\n  );\\n\\n  /* * `offerId` was present and is now removed from the book. */\\n  event OfferRetract(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id\\n  );\\n}\\n\\n/* # IMaker interface */\\ninterface IMaker {\\n  /* Called upon offer execution. \\n  - If the call fails, Mangrove will not try to transfer funds.\\n  - If the call succeeds but returndata's first 32 bytes are not 0, Mangrove will not try to transfer funds either.\\n  - If the call succeeds and returndata's first 32 bytes are 0, Mangrove will try to transfer funds.\\n  In other words, you may declare failure by reverting or by returning nonzero data. In both cases, those 32 first bytes will be passed back to you during the call to `makerPosthook` in the `result.mgvData` field.\\n     ```\\n     function tradeRevert(bytes32 data) internal pure {\\n       bytes memory revData = new bytes(32);\\n         assembly {\\n           mstore(add(revData, 32), data)\\n           revert(add(revData, 32), 32)\\n         }\\n     }\\n     ```\\n     */\\n  function makerExecute(MgvLib.SingleOrder calldata order)\\n    external\\n    returns (bytes32);\\n\\n  /* Called after all offers of an order have been executed. Posthook of the last executed order is called first and full reentrancy into the Mangrove is enabled at this time. `order` recalls key arguments of the order that was processed and `result` recalls important information for updating the current offer. (see [above](#MgvLib/OrderResult))*/\\n  function makerPosthook(\\n    MgvLib.SingleOrder calldata order,\\n    MgvLib.OrderResult calldata result\\n  ) external;\\n}\\n\\n/* # ITaker interface */\\ninterface ITaker {\\n  /* Inverted mangrove only: call to taker after loans went through */\\n  function takerTrade(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    // total amount of outbound_tkn token that was flashloaned to the taker\\n    uint totalGot,\\n    // total amount of inbound_tkn token that should be made available\\n    uint totalGives\\n  ) external;\\n}\\n\\n/* # Monitor interface\\nIf enabled, the monitor receives notification after each offer execution and is read for each pair's `gasprice` and `density`. */\\ninterface IMgvMonitor {\\n  function notifySuccess(MgvLib.SingleOrder calldata sor, address taker)\\n    external;\\n\\n  function notifyFail(MgvLib.SingleOrder calldata sor, address taker) external;\\n\\n  function read(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (uint gasprice, uint density);\\n}\\n\",\"keccak256\":\"0x05bfbf4ea3585581421ab004593f41fd68a645c2a18fabdf91306355393f2e3b\",\"license\":\"Unlicense\"},\"contracts/Strategies/OfferLogics/MangroveOffer.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// MangroveOffer.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"../utils/AccessControlled.sol\\\";\\nimport {MangroveOfferStorage as MOS} from \\\"./MangroveOfferStorage.sol\\\";\\nimport \\\"../interfaces/IOfferLogic.sol\\\";\\nimport \\\"../interfaces/IMangrove.sol\\\";\\nimport \\\"../interfaces/IEIP20.sol\\\";\\n\\n// Naming scheme:\\n// `f() public`: can be used as is in all descendants of `this` contract\\n// `_f() internal`: descendant of this contract should provide a public wrapper of this function\\n// `__f__() virtual internal`: descendant of this contract may override this function to specialize the strat\\n\\n/// MangroveOffer is the basic building block to implement a reactive offer that interfaces with the Mangrove\\nabstract contract MangroveOffer is AccessControlled, IOfferLogic {\\n\\n  // immutable does not impact storage layout\\n  IMangrove public immutable MGV;\\n  // `this` contract entypoint is `makerExecute` or `makerPosthook` if `msg.sender == address(MGV)`\\n  // `this` contract was called on an admin function iff `msg.sender = admin`\\n\\n  modifier mgvOrAdmin() {\\n    require(\\n      msg.sender == admin() || msg.sender == address(MGV),\\n      \\\"AccessControlled/Invalid\\\"\\n    );\\n    _;\\n  }\\n\\n  // necessary function to withdraw funds from Mangrove\\n  receive() external payable virtual {}\\n\\n  constructor(IMangrove _mgv, address deployer) AccessControlled(deployer) {\\n    MGV = _mgv;\\n    MOS.get_storage().OFR_GASREQ = 80_000;\\n  }\\n\\n  function OFR_GASREQ() public view returns (uint) {\\n    return MOS.get_storage().OFR_GASREQ;\\n  }\\n\\n  /////// Mandatory callback functions\\n\\n  // `makerExecute` is the callback function to execute all offers that were posted on Mangrove by `this` contract.\\n  // it may not be overriden although it can be customized using `__lastLook__`, `__put__` and `__get__` hooks.\\n  // NB #1: When overriding the above hooks, the Offer Makers should make sure they do not revert in order if they wish to post logs in case of bad executions.\\n  // NB #2: if `makerExecute` does revert, the offer will be considered to be refusing the trade.\\n  // NB #3: `makerExecute` must return the empty bytes to signal to MGV it wishes to perform the trade. Any other returned byes will signal to MGV that `this` contract does not wish to proceed with the trade\\n  // NB #4: Reneging on trade by either reverting or returning non empty bytes will have the following effects:\\n  // * Offer is removed from the Order Book\\n  // * Offer bounty will be withdrawn from offer provision and sent to the offer taker. The remaining provision will be credited to the maker account on Mangrove\\n  function makerExecute(ML.SingleOrder calldata order)\\n    external\\n    override\\n    onlyCaller(address(MGV))\\n    returns (bytes32 ret)\\n  {\\n    if (!__lastLook__(order)) {\\n      // hook to check order details and decide whether `this` contract should renege on the offer.\\n      revert(\\\"mgvOffer/abort/reneged\\\");\\n    }\\n    if (__put__(order.gives, order) > 0) {\\n      revert(\\\"mgvOffer/abort/putFailed\\\");\\n    }\\n    if (__get__(order.wants, order) > 0) {\\n      revert(\\\"mgvOffer/abort/getFailed\\\");\\n    }\\n    return ret;\\n  }\\n\\n  // `makerPosthook` is the callback function that is called by Mangrove *after* the offer execution.\\n  // It may not be overriden although it can be customized via the post-hooks `__posthookSuccess__`, `__posthookGetFailure__`, `__posthookReneged__` and `__posthookFallback__` (see below).\\n  // Offer Maker SHOULD make sure the overriden posthooks do not revert in order to be able to post logs in case of bad executions.\\n  function makerPosthook(\\n    ML.SingleOrder calldata order,\\n    ML.OrderResult calldata result\\n  ) external override onlyCaller(address(MGV)) {\\n    if (result.mgvData == \\\"mgv/tradeSuccess\\\") {\\n      // toplevel posthook may ignore returned value which is only usefull for compositionality\\n      __posthookSuccess__(order);\\n    } else {\\n      emit LogIncident(\\n        IEIP20(order.outbound_tkn),\\n        IEIP20(order.inbound_tkn),\\n        order.offerId,\\n        result.makerData\\n      );\\n      __posthookFallback__(order, result);\\n    }\\n  }\\n\\n  // sets default gasreq for `new/updateOffer`\\n  function setGasreq(uint gasreq) public override mgvOrAdmin {\\n    require(uint24(gasreq) == gasreq, \\\"mgvOffer/gasreq/overflow\\\");\\n    MOS.get_storage().OFR_GASREQ = gasreq;\\n  }\\n\\n  /// `this` contract needs to approve Mangrove to let it perform outbound token transfer at the end of the `makerExecute` function\\n  /// NB if anyone can call this function someone could reset it to 0 for griefing\\n  function approveMangrove(IEIP20 outbound_tkn, uint amount) public mgvOrAdmin {\\n    require(\\n      outbound_tkn.approve(address(MGV), amount),\\n      \\\"mgvOffer/approve/Fail\\\"\\n    );\\n  }\\n\\n  /// withdraws ETH from the bounty vault of the Mangrove.\\n  function _withdrawFromMangrove(address payable receiver, uint amount)\\n    internal\\n    returns (bool noRevert)\\n  {\\n    require(MGV.withdraw(amount), \\\"mgvOffer/withdraw/transferFail\\\");\\n    if (receiver != address(this)) {\\n      (noRevert, ) = receiver.call{value: amount}(\\\"\\\");\\n    } else {\\n      noRevert = true;\\n    }\\n  }\\n\\n  ////// Default Customizable hooks for Taker Order'execution\\n\\n  // Define this hook to describe where the inbound token, which are brought by the Offer Taker, should go during Taker Order's execution.\\n  // Usage of this hook is the following:\\n  // * `amount` is the amount of `inbound` tokens whose deposit location is to be defined when entering this function\\n  // * `order` is a recall of the taker order that is at the origin of the current trade.\\n  // * Function must return `missingPut` (<=`amount`), which is the amount of `inbound` tokens whose deposit location has not been decided (possibly because of a failure) during this function execution\\n  // NB in case of preceding executions of descendant specific `__put__` implementations, `amount` might be lower than `order.gives` (how much `inbound` tokens the taker gave)\\n  function __put__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (uint missingPut);\\n\\n  // Define this hook to implement fetching `amount` of outbound tokens, possibly from another source than `this` contract during Taker Order's execution.\\n  // Usage of this hook is the following:\\n  // * `amount` is the amount of `outbound` tokens that still needs to be brought to the balance of `this` contract when entering this function\\n  // * `order` is a recall of the taker order that is at the origin of the current trade.\\n  // * Function must return `missingGet` (<=`amount`), which is the amount of `outbound` tokens still need to be fetched at the end of this function\\n  // NB in case of preceding executions of descendant specific `__get__` implementations, `amount` might be lower than `order.wants` (how much `outbound` tokens the taker wants)\\n  function __get__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (uint missingGet);\\n\\n  // Override this hook to implement a last look check during Taker Order's execution.\\n  // Return value should be `true` if Taker Order is acceptable.\\n  // Returning `false` will cause `MakerExecute` to return the \\\"RENEGED\\\" bytes, which are interpreted by MGV as a signal that `this` contract wishes to cancel the trade\\n  function __lastLook__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (bool proceed)\\n  {\\n    order; //shh\\n    proceed = true;\\n  }\\n\\n  ////// Customizable post-hooks.\\n\\n  // Override this post-hook to implement what `this` contract should do when called back after a successfully executed order.\\n  function __posthookSuccess__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (bool success)\\n  {\\n    order; // shh\\n    success = true;\\n  }\\n\\n  // Override this post-hook to implement fallback behavior when Taker Order's execution failed unexpectedly. Information from Mangrove is accessible in `result.mgvData` for logging purpose.\\n  function __posthookFallback__(\\n    ML.SingleOrder calldata order,\\n    ML.OrderResult calldata result\\n  ) internal virtual returns (bool success) {\\n    order;\\n    result;\\n    return true;\\n  }\\n\\n  //utils\\n  function $(IEIP20 token) internal pure returns (address) {\\n    return address(token);\\n  }\\n\\n  // returns missing provision to repost `offerId` at given `gasreq` and `gasprice`\\n  // if `offerId` is not in the Order Book, will simply return how much is needed to post\\n  function _getMissingProvision(\\n    uint balance, // offer owner balance on Mangrove\\n    IEIP20 outbound_tkn,\\n    IEIP20 inbound_tkn,\\n    uint gasreq, // give > type(uint24).max to use `this.OFR_GASREQ()`\\n    uint gasprice, // give 0 to use Mangrove's gasprice\\n    uint offerId // set this to 0 if one is not reposting an offer\\n  ) internal view returns (uint) {\\n    (P.Global.t globalData, P.Local.t localData) = MGV.config(\\n      $(outbound_tkn),\\n      $(inbound_tkn)\\n    );\\n    P.OfferDetail.t offerDetailData = MGV.offerDetails(\\n      $(outbound_tkn),\\n      $(inbound_tkn),\\n      offerId\\n    );\\n    uint _gp;\\n    if (globalData.gasprice() > gasprice) {\\n      _gp = globalData.gasprice();\\n    } else {\\n      _gp = gasprice;\\n    }\\n    if (gasreq > type(uint24).max) {\\n      gasreq = OFR_GASREQ();\\n    }\\n    uint bounty = (gasreq + localData.offer_gasbase()) * _gp * 10**9; // in WEI\\n    // if `offerId` is not in the OfferList, all returned values will be 0\\n    uint currentProvisionLocked = (offerDetailData.gasreq() +\\n      offerDetailData.offer_gasbase()) *\\n      offerDetailData.gasprice() *\\n      10**9;\\n    uint currentProvision = currentProvisionLocked + balance;\\n    return (currentProvision >= bounty ? 0 : bounty - currentProvision);\\n  }\\n}\\n\",\"keccak256\":\"0xf7355cf3e4d8f391723804e530eb45518fbce8c15acfe0ecd5fdcec3fcceecaf\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/MangroveOfferStorage.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// MangroveOffer.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IOfferLogic.sol\\\";\\nimport \\\"../interfaces/IMangrove.sol\\\";\\nimport \\\"../interfaces/IEIP20.sol\\\";\\n\\n// Naming scheme:\\n// `f() public`: can be used as is in all descendants of `this` contract\\n// `_f() internal`: descendant of this contract should provide a public wrapper of this function\\n// `__f__() virtual internal`: descendant of this contract may override this function to specialize the strat\\n\\n/// MangroveOffer is the basic building block to implement a reactive offer that interfaces with the Mangrove\\nlibrary MangroveOfferStorage {\\n  struct Layout {\\n    // default values\\n    uint OFR_GASREQ;\\n  }\\n\\n  function get_storage() internal pure returns (Layout storage st) {\\n    bytes32 storagePosition = keccak256(\\\"Mangrove.MangroveOfferStorage\\\");\\n    assembly {\\n      st.slot := storagePosition\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x356c5a4797455607852a1ca7deb0f5ba252603edeaac269e87d3953b258f3651\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/SingleUser/Deployable/MarketMaking/Mango/Mango.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// Mango.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport \\\"./MangoStorage.sol\\\";\\nimport \\\"./MangoImplementation.sol\\\";\\nimport \\\"../../../Persistent.sol\\\";\\nimport \\\"../Sourcers/EOASourcer.sol\\\";\\n\\n/** Discrete automated market making strat */\\n/** This AMM is headless (no price model) and market makes on `NSLOTS` price ranges*/\\n/** current `Pmin` is the price of an offer at position `0`, current `Pmax` is the price of an offer at position `NSLOTS-1`*/\\n/** Initially `Pmin = P(0) = QUOTE_0/BASE_0` and the general term is P(i) = __quote_progression__(i)/BASE_0 */\\n/** NB `__quote_progression__` is a hook that defines how price increases with positions and is by default an arithmetic progression, i.e __quote_progression__(i) = QUOTE_0 + `delta`*i */\\n/** When one of its offer is matched on Mangrove, the headless strat does the following: */\\n/** Each time this strat receives b `BASE` tokens (bid was taken) at price position i, it increases the offered (`BASE`) volume of the ask at position i+1 of 'b'*/\\n/** Each time this strat receives q `QUOTE` tokens (ask was taken) at price position i, it increases the offered (`QUOTE`) volume of the bid at position i-1 of 'q'*/\\n/** In case of a partial fill of an offer at position i, the offer residual is reposted (see `Persistent` strat class)*/\\n\\ncontract Mango is Persistent {\\n\\n  // emitted when init function has been called and AMM becomes active\\n  event Initialized(uint from, uint to);\\n  event SetLiquiditySourcer(ISourcer);\\n\\n  address private immutable IMPLEMENTATION;\\n\\n  uint public immutable NSLOTS;\\n  IEIP20 public immutable BASE;\\n  IEIP20 public immutable QUOTE;\\n\\n  // Asks and bids offer Ids are stored in `ASKS` and `BIDS` arrays respectively.\\n\\n  constructor(\\n    IMangrove mgv,\\n    IEIP20 base,\\n    IEIP20 quote,\\n    uint base_0,\\n    uint quote_0,\\n    uint nslots,\\n    uint price_incr,\\n    address deployer\\n  ) MangroveOffer(mgv, deployer) {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    // sanity check\\n    require(\\n      nslots > 0 &&\\n        address(mgv) != address(0) &&\\n        uint16(nslots) == nslots &&\\n        uint96(base_0) == base_0 &&\\n        uint96(quote_0) == quote_0,\\n      \\\"Mango/constructor/invalidArguments\\\"\\n    );\\n    // require(\\n    //   address(liquidity_sourcer) != address(0),\\n    //   \\\"Mango/constructor/0xLiquiditySource\\\"\\n    // );\\n    NSLOTS = nslots;\\n\\n    // implementation should have correct immutables\\n    IMPLEMENTATION = address(\\n      new MangoImplementation(\\n        mgv,\\n        base,\\n        quote,\\n        uint96(base_0),\\n        uint96(quote_0),\\n        nslots\\n      )\\n    );\\n    BASE = base;\\n    QUOTE = quote;\\n    // setting local storage\\n    mStr.asks = new uint[](nslots);\\n    mStr.bids = new uint[](nslots);\\n    mStr.delta = price_incr;\\n    // logs `BID/ASKatMin/MaxPosition` events when only 1 slot remains\\n    mStr.min_buffer = 1;\\n\\n    // setting inherited storage\\n    setGasreq(400_000); // dry run OK with 200_000\\n    // approve Mangrove to pull funds during trade in order to pay takers\\n    approveMangrove(quote, type(uint).max);\\n    approveMangrove(base, type(uint).max);\\n  }\\n\\n  // populate mangrove order book with bids or/and asks in the price range R = [`from`, `to`[\\n  // tokenAmounts are always expressed `gives`units, i.e in BASE when asking and in QUOTE when bidding\\n  function initialize(\\n    uint lastBidPosition, // if `lastBidPosition` is in R, then all offers before `lastBidPosition` (included) will be bids, offers strictly after will be asks.\\n    uint from, // first price position to be populated\\n    uint to, // last price position to be populated\\n    uint[][2] calldata pivotIds, // `pivotIds[0][i]` ith pivots for bids, `pivotIds[1][i]` ith pivot for asks\\n    uint[] calldata tokenAmounts // `tokenAmounts[i]` is the amount of `BASE` or `QUOTE` tokens (dePENDING on `withBase` flag) that is used to fixed one parameter of the price at position `from+i`.\\n  ) public mgvOrAdmin {\\n    (bool success, bytes memory retdata) = IMPLEMENTATION.delegatecall(\\n      abi.encodeWithSelector(\\n        MangoImplementation.$initialize.selector,\\n        lastBidPosition,\\n        from,\\n        to,\\n        pivotIds,\\n        tokenAmounts\\n      )\\n    );\\n    if (!success) {\\n      MangoStorage.revertWithData(retdata);\\n    } else {\\n      emit Initialized({from: from, to: to});\\n    }\\n  }\\n\\n  /** Sets the account from which base (resp. quote) tokens need to be fetched or put during trade execution*/\\n  /** */\\n  /** NB Sourcer might need further approval to work as intended*/\\n  function set_liquidity_sourcer(ISourcer sourcer, uint gasreq)\\n    external\\n    onlyAdmin\\n  {\\n    MangoStorage.get_storage().liquidity_sourcer = sourcer;\\n    BASE.approve(address(sourcer), type(uint).max);\\n    QUOTE.approve(address(sourcer), type(uint).max);\\n    setGasreq(gasreq);\\n    emit SetLiquiditySourcer(sourcer);\\n  }\\n\\n  function set_EOA_sourcer() external onlyAdmin {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    mStr.liquidity_sourcer = new EOASourcer(address(this), admin());\\n    BASE.approve(address(mStr.liquidity_sourcer), type(uint).max);\\n    QUOTE.approve(address(mStr.liquidity_sourcer), type(uint).max);\\n    emit SetLiquiditySourcer(mStr.liquidity_sourcer);\\n  }\\n\\n  function liquidity_sourcer() public view returns (ISourcer) {\\n    return MangoStorage.get_storage().liquidity_sourcer;\\n  }\\n\\n  function reset_pending() external onlyAdmin {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    mStr.pending_base = 0;\\n    mStr.pending_quote = 0;\\n  }\\n\\n  /** Setters and getters */\\n  function delta() external view onlyAdmin returns (uint) {\\n    return MangoStorage.get_storage().delta;\\n  }\\n\\n  function set_delta(uint _delta) public mgvOrAdmin {\\n    MangoStorage.get_storage().delta = _delta;\\n  }\\n\\n  function shift() external view onlyAdmin returns (int) {\\n    return MangoStorage.get_storage().shift;\\n  }\\n\\n  function pending() external view onlyAdmin returns (uint[2] memory) {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    return [mStr.pending_base, mStr.pending_quote];\\n  }\\n\\n  /** __put__ is default SingleUser.__put__*/\\n\\n  /** Fetches required tokens from the corresponding source*/\\n  function __get__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (uint)\\n  {\\n    // pulled might be lower or higher than amount\\n    ISourcer sourcer = MangoStorage.get_storage().liquidity_sourcer;\\n    uint pulled = MangoStorage.get_storage().liquidity_sourcer.pull(\\n      IEIP20(order.outbound_tkn),\\n      amount\\n    );\\n    if (pulled > amount) {\\n      return 0; //nothing is missing\\n    } else {\\n      // still needs to get liquidity using `SingleUser.__get__()`\\n      return super.__get__(amount - pulled, order);\\n    }\\n  }\\n\\n  // with ba=0:bids only, ba=1: asks only ba>1 all\\n  function retractOffers(\\n    uint ba,\\n    uint from,\\n    uint to\\n  ) external onlyAdmin returns (uint collected) {\\n    (bool success, bytes memory retdata) = IMPLEMENTATION.delegatecall(\\n      abi.encodeWithSelector(\\n        MangoImplementation.$retractOffers.selector,\\n        ba,\\n        from,\\n        to\\n      )\\n    );\\n    if (!success) {\\n      MangoStorage.revertWithData(retdata);\\n    } else {\\n      return abi.decode(retdata, (uint));\\n    }\\n  }\\n\\n  /** Shift the price (induced by quote amount) of n slots down or up */\\n  /** price at position i will be shifted (up or down dePENDING on the sign of `shift`) */\\n  /** New positions 0<= i < s are initialized with amount[i] in base tokens if `withBase`. In quote tokens otherwise*/\\n  function set_shift(\\n    int s,\\n    bool withBase,\\n    uint[] calldata amounts\\n  ) public mgvOrAdmin {\\n    (bool success, bytes memory retdata) = IMPLEMENTATION.delegatecall(\\n      abi.encodeWithSelector(\\n        MangoImplementation.$set_shift.selector,\\n        s,\\n        withBase,\\n        amounts\\n      )\\n    );\\n    if (!success) {\\n      MangoStorage.revertWithData(retdata);\\n    }\\n  }\\n\\n  function set_min_offer_type(uint m) external mgvOrAdmin {\\n    MangoStorage.get_storage().min_buffer = m;\\n  }\\n\\n  function _staticdelegatecall(bytes calldata data)\\n    external\\n    onlyCaller(address(this))\\n  {\\n    (bool success, bytes memory retdata) = IMPLEMENTATION.delegatecall(data);\\n    if (!success) {\\n      MangoStorage.revertWithData(retdata);\\n    }\\n    assembly {\\n      return(add(retdata, 32), returndatasize())\\n    }\\n  }\\n\\n  // return Mango offer Ids on Mangrove. If `liveOnly` will only return offer Ids that are live (0 otherwise).\\n  function get_offers(bool liveOnly)\\n    external\\n    view\\n    returns (uint[][2] memory offers)\\n  {\\n    (bool success, bytes memory retdata) = address(this).staticcall(\\n      abi.encodeWithSelector(\\n        this._staticdelegatecall.selector,\\n        abi.encodeWithSelector(\\n          MangoImplementation.$get_offers.selector,\\n          liveOnly\\n        )\\n      )\\n    );\\n    if (!success) {\\n      MangoStorage.revertWithData(retdata);\\n    } else {\\n      return abi.decode(retdata, (uint[][2]));\\n    }\\n  }\\n\\n  // starts reneging all offers\\n  // NB reneged offers will not be reposted\\n  function pause() public mgvOrAdmin {\\n    MangoStorage.get_storage().paused = true;\\n  }\\n\\n  function restart() external onlyAdmin {\\n    MangoStorage.get_storage().paused = false;\\n  }\\n\\n  function is_paused() external view returns (bool) {\\n    return MangoStorage.get_storage().paused;\\n  }\\n\\n  // this overrides is read during `makerExecute` call (see `MangroveOffer`)\\n  function __lastLook__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (bool proceed)\\n  {\\n    order; //shh\\n    proceed = !MangoStorage.get_storage().paused;\\n  }\\n\\n  function __posthookSuccess__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    (bool success, bytes memory retdata) = IMPLEMENTATION.delegatecall(\\n      abi.encodeWithSelector(\\n        MangoImplementation.$posthookSuccess.selector,\\n        order\\n      )\\n    );\\n    if (!success) {\\n      MangoStorage.revertWithData(retdata);\\n    } else {\\n      return abi.decode(retdata, (bool));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x561fba12a19b16a158584e0f5a51afb44a023756a646cd650d986f3ae5b54cc7\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/SingleUser/Deployable/MarketMaking/Mango/MangoImplementation.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// MangoImplementation.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport \\\"./MangoStorage.sol\\\";\\nimport \\\"../../../Persistent.sol\\\";\\nimport \\\"contracts/Strategies/utils/TransferLib.sol\\\";\\nimport \\\"contracts/Strategies/interfaces/ISourcer.sol\\\";\\n\\n/** Discrete automated market making strat */\\n/** This AMM is headless (no price model) and market makes on `NSLOTS` price ranges*/\\n/** current `Pmin` is the price of an offer at position `0`, current `Pmax` is the price of an offer at position `NSLOTS-1`*/\\n/** Initially `Pmin = P(0) = QUOTE_0/BASE_0` and the general term is P(i) = __quote_progression__(i)/BASE_0 */\\n/** NB `__quote_progression__` is a hook that defines how price increases with positions and is by default an arithmetic progression, i.e __quote_progression__(i) = QUOTE_0 + `delta`*i */\\n/** When one of its offer is matched on Mangrove, the headless strat does the following: */\\n/** Each time this strat receives b `BASE` tokens (bid was taken) at price position i, it increases the offered (`BASE`) volume of the ask at position i+1 of 'b'*/\\n/** Each time this strat receives q `QUOTE` tokens (ask was taken) at price position i, it increases the offered (`QUOTE`) volume of the bid at position i-1 of 'q'*/\\n/** In case of a partial fill of an offer at position i, the offer residual is reposted (see `Persistent` strat class)*/\\n\\ncontract MangoImplementation is Persistent {\\n\\n  event BidAtMaxPosition();\\n  // emitted when strat has reached max amount of Asks and needs rebalancing (should shift of x<0 positions in order to have ask prices that are better for the taker)\\n  event AskAtMinPosition();\\n\\n  modifier delegated() {\\n    require (address(this) == PROXY, \\\"MangoImplementation/invalidCall\\\");\\n    _;\\n  }\\n\\n  // total number of Asks (resp. Bids)\\n  uint immutable NSLOTS;\\n  // initial min price given by `QUOTE_0/BASE_0`\\n  uint96 immutable BASE_0;\\n  uint96 immutable QUOTE_0;\\n  // Market on which Mango will be acting\\n  IEIP20 immutable BASE;\\n  IEIP20 immutable QUOTE;\\n\\n  address immutable PROXY;\\n\\n  constructor(\\n    IMangrove mgv,\\n    IEIP20 base,\\n    IEIP20 quote,\\n    uint96 base_0,\\n    uint96 quote_0,\\n    uint nslots\\n  ) MangroveOffer(mgv, address(this)) {\\n    // setting immutable fields to match those of `Mango`\\n    BASE = base;\\n    QUOTE = quote;\\n    NSLOTS = nslots;\\n    BASE_0 = base_0;\\n    QUOTE_0 = quote_0;\\n    PROXY = msg.sender;\\n  }\\n\\n  // populate mangrove order book with bids or/and asks in the price range R = [`from`, `to`[\\n  // tokenAmounts are always expressed `gives`units, i.e in BASE when asking and in QUOTE when bidding\\n  function $initialize(\\n    uint lastBidPosition, // if `lastBidPosition` is in R, then all offers before `lastBidPosition` (included) will be bids, offers strictly after will be asks.\\n    uint from, // first price position to be populated\\n    uint to, // last price position to be populated\\n    uint[][2] calldata pivotIds, // `pivotIds[0][i]` ith pivots for bids, `pivotIds[1][i]` ith pivot for asks\\n    uint[] calldata tokenAmounts // `tokenAmounts[i]` is the amount of `BASE` or `QUOTE` tokens (dePENDING on `withBase` flag) that is used to fixed one parameter of the price at position `from+i`.\\n  ) external delegated {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    // making sure a sourcer has been defined between deployment and initialization\\n    require(address(mStr.liquidity_sourcer) != address(0), \\\"Mango/initialize/0xSourcer\\\");\\n    /** Initializing Asks and Bids */\\n    /** NB we assume Mangrove is already provisioned for posting NSLOTS asks and NSLOTS bids*/\\n    /** NB cannot post newOffer with infinite gasreq since fallback OFR_GASREQ is not defined yet (and default is likely wrong) */\\n    require(to > from, \\\"Mango/initialize/invalidSlice\\\");\\n    require(\\n      tokenAmounts.length == NSLOTS &&\\n        pivotIds.length == 2 &&\\n        pivotIds[0].length == NSLOTS &&\\n        pivotIds[1].length == NSLOTS,\\n      \\\"Mango/initialize/invalidArrayLength\\\"\\n    );\\n    require(lastBidPosition < NSLOTS - 1, \\\"Mango/initialize/NoSlotForAsks\\\"); // bidding => slice doesn't fill the book\\n    uint pos;\\n    for (pos = from; pos < to; pos++) {\\n      // if shift is not 0, must convert\\n      uint i = index_of_position(pos);\\n\\n      if (pos <= lastBidPosition) {\\n        uint bidPivot = pivotIds[0][pos];\\n        bidPivot = bidPivot > 0\\n          ? bidPivot // taking pivot from the user\\n          : pos > 0\\n          ? mStr.bids[index_of_position(pos - 1)]\\n          : 0; // otherwise getting last inserted offer as pivot\\n        updateBid({\\n          index: i,\\n          reset: true, // overwrites old value\\n          amount: tokenAmounts[pos],\\n          pivotId: bidPivot\\n        });\\n        if (mStr.asks[i] > 0) {\\n          // if an ASK is also positioned, remove it to prevent spread crossing\\n          // (should not happen if this is the first initialization of the strat)\\n          retractOffer(BASE, QUOTE, mStr.asks[i], false);\\n        }\\n      } else {\\n        uint askPivot = pivotIds[1][pos];\\n        askPivot = askPivot > 0\\n          ? askPivot // taking pivot from the user\\n          : pos > 0\\n          ? mStr.asks[index_of_position(pos - 1)]\\n          : 0; // otherwise getting last inserted offer as pivot\\n        updateAsk({\\n          index: i,\\n          reset: true,\\n          amount: tokenAmounts[pos],\\n          pivotId: askPivot\\n        });\\n        if (mStr.bids[i] > 0) {\\n          // if a BID is also positioned, remove it to prevent spread crossing\\n          // (should not happen if this is the first initialization of the strat)\\n          retractOffer(QUOTE, BASE, mStr.bids[i], false);\\n        }\\n      }\\n    }\\n  }\\n\\n  // with ba=0:bids only, ba=1: asks only ba>1 all\\n  function $retractOffers(\\n    uint ba,\\n    uint from,\\n    uint to\\n  ) external delegated returns (uint collected) {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    for (uint i = from; i < to; i++) {\\n      if (ba > 0) {\\n        // asks or bids+asks\\n        collected += mStr.asks[i] > 0\\n          ? retractOffer(BASE, QUOTE, mStr.asks[i], true)\\n          : 0;\\n      }\\n      if (ba == 0 || ba > 1) {\\n        // bids or bids + asks\\n        collected += mStr.bids[i] > 0\\n          ? retractOffer(QUOTE, BASE, mStr.bids[i], true)\\n          : 0;\\n      }\\n    }\\n  }\\n\\n  /** Shift the price (induced by quote amount) of n slots down or up */\\n  /** price at position i will be shifted (up or down dePENDING on the sign of `shift`) */\\n  /** New positions 0<= i < s are initialized with amount[i] in base tokens if `withBase`. In quote tokens otherwise*/\\n  function $set_shift(\\n    int s,\\n    bool withBase,\\n    uint[] calldata amounts\\n  ) external delegated {\\n    require(\\n      amounts.length == (s < 0 ? uint(-s) : uint(s)),\\n      \\\"Mango/set_shift/notEnoughAmounts\\\"\\n    );\\n    if (s < 0) {\\n      negative_shift(uint(-s), withBase, amounts);\\n    } else {\\n      positive_shift(uint(s), withBase, amounts);\\n    }\\n  }\\n\\n  // return Mango offer Ids on Mangrove. If `liveOnly` will only return offer Ids that are live (0 otherwise).\\n  function $get_offers(bool liveOnly)\\n    external\\n    view\\n    returns (uint[][2] memory offers)\\n  {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    offers[0] = new uint[](NSLOTS);\\n    offers[1] = new uint[](NSLOTS);\\n    for (uint i = 0; i < NSLOTS; i++) {\\n      uint askId = mStr.asks[index_of_position(i)];\\n      uint bidId = mStr.bids[index_of_position(i)];\\n\\n      offers[0][i] = (MGV.offers($(QUOTE), $(BASE), bidId).gives() > 0 ||\\n        !liveOnly)\\n        ? mStr.bids[index_of_position(i)]\\n        : 0;\\n      offers[1][i] = (MGV.offers($(BASE), $(QUOTE), askId).gives() > 0 ||\\n        !liveOnly)\\n        ? mStr.asks[index_of_position(i)]\\n        : 0;\\n    }\\n  }\\n\\n  // posts or updates ask at position of `index`\\n  // returns the amount of `BASE` tokens that failed to be published at that position\\n  // `writeOffer` is split into `writeAsk` and `writeBid` to avoid stack too deep exception\\n  function writeAsk(\\n    uint index,\\n    uint wants,\\n    uint gives,\\n    uint pivotId\\n  ) internal returns (uint) {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    if (mStr.asks[index] == 0) {\\n      // offer slot not initialized yet\\n      try\\n        MGV.newOffer({\\n          outbound_tkn: $(BASE),\\n          inbound_tkn: $(QUOTE),\\n          wants: wants,\\n          gives: gives,\\n          gasreq: OFR_GASREQ(),\\n          gasprice: 0,\\n          pivotId: pivotId\\n        })\\n      returns (uint offerId) {\\n        mStr.asks[index] = offerId;\\n        mStr.index_of_ask[mStr.asks[index]] = index;\\n        return 0;\\n      } catch (bytes memory reason) {\\n        // `newOffer` can fail when Mango is underprovisioned or if `offer.gives` is below density\\n        if (keccak256(reason) == keccak256(\\\"mgv/insufficientProvision\\\")) {\\n          emit LogIncident(BASE, QUOTE, 0, \\\"Mango/newAsk/outOfProvision\\\");\\n        }\\n        return gives;\\n      }\\n    } else {\\n      try\\n        MGV.updateOffer({\\n          outbound_tkn: $(BASE),\\n          inbound_tkn: $(QUOTE),\\n          wants: wants,\\n          gives: gives,\\n          gasreq: OFR_GASREQ(),\\n          gasprice: 0,\\n          pivotId: pivotId,\\n          offerId: mStr.asks[index]\\n        })\\n      {\\n        // updateOffer succeeded\\n        return 0;\\n      } catch (bytes memory reason) {\\n        // update offer might fail because residual is below density (this is OK)\\n        // it may also fail because there is not enough provision on Mangrove (this is Not OK so we log)\\n        if (keccak256(reason) == keccak256(\\\"mgv/insufficientProvision\\\")) {\\n          emit LogIncident(\\n            BASE,\\n            QUOTE,\\n            mStr.asks[index],\\n            \\\"Mango/updateAsk/outOfProvision\\\"\\n          );\\n        }\\n        // updateOffer failed but `offer` might still be live (i.e with `offer.gives>0`)\\n        uint oldGives = MGV.offers($(BASE), $(QUOTE), mStr.asks[index]).gives();\\n        // if not during initialize we necessarily have gives > oldGives\\n        // otherwise we are trying to reset the offer and oldGives is irrelevant\\n        return (gives > oldGives) ? gives - oldGives : gives;\\n      }\\n    }\\n  }\\n\\n  function writeBid(\\n    uint index,\\n    uint wants,\\n    uint gives,\\n    uint pivotId\\n  ) internal returns (uint) {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    if (mStr.bids[index] == 0) {\\n      try\\n        MGV.newOffer({\\n          outbound_tkn: $(QUOTE),\\n          inbound_tkn: $(BASE),\\n          wants: wants,\\n          gives: gives,\\n          gasreq: OFR_GASREQ(),\\n          gasprice: 0,\\n          pivotId: pivotId\\n        })\\n      returns (uint offerId) {\\n        mStr.bids[index] = offerId;\\n        mStr.index_of_bid[mStr.bids[index]] = index;\\n        return 0;\\n      } catch (bytes memory reason) {\\n        if (keccak256(reason) == keccak256(\\\"mgv/insufficientProvision\\\")) {\\n          emit LogIncident(QUOTE, BASE, 0, \\\"Mango/newBid/outOfProvision\\\");\\n        }\\n        return gives;\\n      }\\n    } else {\\n      try\\n        MGV.updateOffer({\\n          outbound_tkn: $(QUOTE),\\n          inbound_tkn: $(BASE),\\n          wants: wants,\\n          gives: gives,\\n          gasreq: OFR_GASREQ(),\\n          gasprice: 0,\\n          pivotId: pivotId,\\n          offerId: mStr.bids[index]\\n        })\\n      {\\n        return 0;\\n      } catch (bytes memory reason) {\\n        if (keccak256(reason) == keccak256(\\\"mgv/insufficientProvision\\\")) {\\n          emit LogIncident(\\n            QUOTE,\\n            BASE,\\n            mStr.bids[index],\\n            \\\"Mango/writeBid/updateOfferFail\\\"\\n          );\\n        }\\n        // updateOffer failed but `offer` might still be live (i.e with `offer.gives>0`)\\n        uint oldGives = MGV.offers($(QUOTE), $(BASE), mStr.bids[index]).gives();\\n        // if not during initialize we necessarily have gives > oldGives\\n        // otherwise we are trying to reset the offer and oldGives is irrelevant\\n        return (gives > oldGives) ? gives - oldGives : gives;\\n      }\\n    }\\n  }\\n\\n  /** Writes (creates or updates) a maker offer on Mangrove's order book*/\\n  function safeWriteOffer(\\n    uint index,\\n    IEIP20 outbound_tkn,\\n    uint wants,\\n    uint gives,\\n    bool withPending, // whether `gives` amount includes current pending tokens\\n    uint pivotId\\n  ) internal {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    if (outbound_tkn == BASE) {\\n      uint not_published = writeAsk(index, wants, gives, pivotId);\\n      if (not_published > 0) {\\n        // Ask could not be written on the book (density or provision issue)\\n        mStr.pending_base = withPending\\n          ? not_published\\n          : (mStr.pending_base + not_published);\\n      } else {\\n        if (withPending) {\\n          mStr.pending_base = 0;\\n        }\\n      }\\n    } else {\\n      uint not_published = writeBid(index, wants, gives, pivotId);\\n      if (not_published > 0) {\\n        mStr.pending_quote = withPending\\n          ? not_published\\n          : (mStr.pending_quote + not_published);\\n      } else {\\n        if (withPending) {\\n          mStr.pending_quote = 0;\\n        }\\n      }\\n    }\\n  }\\n\\n  // returns the value of x in the ring [0,m]\\n  // i.e if x>=0 this is just x % m\\n  // if x<0 this is m + (x % m)\\n  function modulo(int x, uint m) internal pure returns (uint) {\\n    if (x >= 0) {\\n      return uint(x) % m;\\n    } else {\\n      return uint(int(m) + (x % int(m)));\\n    }\\n  }\\n\\n  /** Minimal amount of quotes for the general term of the `quote_progression` */\\n  /** If min price was not shifted this is just `QUOTE_0` */\\n  /** In general this is QUOTE_0 + shift*delta */\\n  function quote_min() internal view returns (uint) {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    int qm = int(uint(QUOTE_0)) + mStr.shift * int(mStr.delta);\\n    require(qm > 0, \\\"Mango/quote_min/ShiftUnderflow\\\");\\n    return (uint(qm));\\n  }\\n\\n  /** Returns the price position in the order book of the offer associated to this index `i` */\\n  function position_of_index(uint i) internal view returns (uint) {\\n    // position(i) = (i+shift) % N\\n    return modulo(int(i) - MangoStorage.get_storage().shift, NSLOTS);\\n  }\\n\\n  /** Returns the index in the ring of offers at which the offer Id at position `p` in the book is stored */\\n  function index_of_position(uint p) internal view returns (uint) {\\n    return modulo(int(p) + MangoStorage.get_storage().shift, NSLOTS);\\n  }\\n\\n  /**Next index in the ring of offers */\\n  function next_index(uint i) internal view returns (uint) {\\n    return (i + 1) % NSLOTS;\\n  }\\n\\n  /**Previous index in the ring of offers */\\n  function prev_index(uint i) internal view returns (uint) {\\n    return i > 0 ? i - 1 : NSLOTS - 1;\\n  }\\n\\n  /** Function that determines the amount of quotes that are offered at position i of the OB dePENDING on initial_price and paramater delta*/\\n  /** Here the default is an arithmetic progression */\\n  function quote_progression(uint position) internal view returns (uint) {\\n    return\\n      MangoStorage.quote_price_jumps(\\n        MangoStorage.get_storage().delta,\\n        position,\\n        quote_min()\\n      );\\n  }\\n\\n  /** Returns the quantity of quote tokens for an offer at position `p` given an amount of Base tokens (eq. 2)*/\\n  function quotes_of_position(uint p, uint base_amount)\\n    internal\\n    view\\n    returns (uint)\\n  {\\n    return (quote_progression(p) * base_amount) / BASE_0;\\n  }\\n\\n  /** Returns the quantity of base tokens for an offer at position `p` given an amount of quote tokens (eq. 3)*/\\n  function bases_of_position(uint p, uint quote_amount)\\n    internal\\n    view\\n    returns (uint)\\n  {\\n    return (quote_amount * BASE_0) / quote_progression(p);\\n  }\\n\\n  /** Recenter the order book by shifting min price up `s` positions in the book */\\n  /** As a consequence `s` Bids will be cancelled and `s` new asks will be posted */\\n  function positive_shift(\\n    uint s,\\n    bool withBase,\\n    uint[] calldata amounts\\n  ) internal {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    require(s < NSLOTS, \\\"Mango/shift/positiveShiftTooLarge\\\");\\n    uint index = index_of_position(0);\\n    mStr.shift += int(s); // updating new shift\\n    // Warning: from now on position_of_index reflects the new shift\\n    // One must progress relative to index when retracting offers\\n    uint cpt = 0;\\n    while (cpt < s) {\\n      // slots occupied by [Bids[index],..,Bids[index+`s` % N]] are retracted\\n      if (mStr.bids[index] != 0) {\\n        retractOffer({\\n          outbound_tkn: QUOTE,\\n          inbound_tkn: BASE,\\n          offerId: mStr.bids[index],\\n          deprovision: false\\n        });\\n      }\\n\\n      // slots are replaced by `s` Asks.\\n      // NB the price of Ask[index] is computed given the new position associated to `index`\\n      // because the shift has been updated above\\n\\n      // `pos` is the offer position in the OB (not the array)\\n      uint pos = position_of_index(index);\\n      uint new_gives;\\n      uint new_wants;\\n      if (withBase) {\\n        // posting new ASKS with base amount fixed\\n        new_gives = amounts[cpt];\\n        new_wants = quotes_of_position(pos, amounts[cpt]);\\n      } else {\\n        // posting new ASKS with quote amount fixed\\n        new_wants = amounts[cpt];\\n        new_gives = bases_of_position(pos, amounts[cpt]);\\n      }\\n      safeWriteOffer({\\n        index: index,\\n        outbound_tkn: BASE,\\n        wants: new_wants,\\n        gives: new_gives,\\n        withPending: false, // don't add pending liqudity in new offers (they are far from mid price)\\n        pivotId: pos > 0 ? mStr.asks[index_of_position(pos - 1)] : 0\\n      });\\n      cpt++;\\n      index = next_index(index);\\n    }\\n  }\\n\\n  /** Recenter the order book by shifting max price down `s` positions in the book */\\n  /** As a consequence `s` Asks will be cancelled and `s` new Bids will be posted */\\n  function negative_shift(\\n    uint s,\\n    bool withBase,\\n    uint[] calldata amounts\\n  ) internal {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    require(s < NSLOTS, \\\"Mango/shift/NegativeShiftTooLarge\\\");\\n    uint index = index_of_position(NSLOTS - 1);\\n    mStr.shift -= int(s); // updating new shift\\n    // Warning: from now on position_of_index reflects the new shift\\n    // One must progress relative to index when retracting offers\\n    uint cpt;\\n    while (cpt < s) {\\n      // slots occupied by [Asks[index-`s` % N],..,Asks[index]] are retracted\\n      if (mStr.asks[index] != 0) {\\n        retractOffer({\\n          outbound_tkn: BASE,\\n          inbound_tkn: QUOTE,\\n          offerId: mStr.asks[index],\\n          deprovision: false\\n        });\\n      }\\n      // slots are replaced by `s` Bids.\\n      // NB the price of Bids[index] is computed given the new position associated to `index`\\n      // because the shift has been updated above\\n\\n      // `pos` is the offer position in the OB (not the array)\\n      uint pos = position_of_index(index);\\n      uint new_gives;\\n      uint new_wants;\\n      if (withBase) {\\n        // amounts in base\\n        new_wants = amounts[cpt];\\n        new_gives = quotes_of_position(pos, amounts[cpt]);\\n      } else {\\n        // amounts in quote\\n        new_wants = bases_of_position(pos, amounts[cpt]);\\n        new_gives = amounts[cpt];\\n      }\\n      safeWriteOffer({\\n        index: index,\\n        outbound_tkn: QUOTE,\\n        wants: new_wants,\\n        gives: new_gives,\\n        withPending: false,\\n        pivotId: pos < NSLOTS - 1 ? mStr.bids[index_of_position(pos + 1)] : 0\\n      });\\n      cpt++;\\n      index = prev_index(index);\\n    }\\n  }\\n\\n  // residual gives is default (i.e offer.gives - order.wants) + PENDING\\n  // this overrides the corresponding function in `Persistent`\\n  function __residualGives__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (uint)\\n  {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    if (order.outbound_tkn == $(BASE)) {\\n      // Ask offer\\n      return super.__residualGives__(order) + mStr.pending_base;\\n    } else {\\n      // Bid offer\\n      return super.__residualGives__(order) + mStr.pending_quote;\\n    }\\n  }\\n\\n  // for reposting partial filled offers one always gives the residual (default behavior)\\n  // and adapts wants to the new price (if different).\\n  // this overrides the corresponding function in `Persistent`\\n  function __residualWants__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (uint)\\n  {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    if (order.outbound_tkn == address(BASE)) {\\n      // Ask offer (wants QUOTE)\\n      uint index = mStr.index_of_ask[order.offerId];\\n      uint residual_base = __residualGives__(order); // default\\n      if (residual_base == 0) {\\n        return 0;\\n      }\\n      return quotes_of_position(position_of_index(index), residual_base);\\n    } else {\\n      // Bid order (wants BASE)\\n      uint index = mStr.index_of_bid[order.offerId];\\n      uint residual_quote = __residualGives__(order); // default\\n      if (residual_quote == 0) {\\n        return 0;\\n      }\\n      return bases_of_position(position_of_index(index), residual_quote);\\n    }\\n  }\\n\\n  // TODO add LogIncident and Bid/AskatMax logs\\n  function $posthookSuccess(ML.SingleOrder calldata order)\\n    external\\n    delegated\\n    returns (bool success)\\n  {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n\\n    // manage source of BASE and QUOTE whose reserve may have changed during the trade execution\\n    IEIP20[] memory tokens = new IEIP20[](2);\\n    tokens[0] = BASE;\\n    tokens[1] = QUOTE;\\n\\n    // tells liquidity sourcer to handle locally stored liquidity (liquidity from the taker and possibly liquidity brought locally during `__get__` function).\\n    // this will throw if sourcer is 0x\\n    mStr.liquidity_sourcer.flush(tokens);\\n\\n    // reposting residual of offer using override `__newWants__` and `__newGives__` for new price\\n    if (order.outbound_tkn == $(BASE)) {\\n      // order is an Ask\\n      //// Reposting Offer Residual (if any)\\n      if (!super.__posthookSuccess__(order)) {\\n        // residual could not be reposted --either below density or Mango went out of provision on Mangrove\\n        mStr.pending_base = __residualGives__(order); // this includes previous `pending_base`\\n      } else {\\n        mStr.pending_base = 0;\\n      }\\n      //// Posting dual bid offer\\n      uint index = mStr.index_of_ask[order.offerId];\\n\\n      uint pos = position_of_index(index);\\n      // bid for some BASE token with the received QUOTE tokens @ pos-1\\n      if (pos > 0) {\\n        // updateBid will include PENDING_QUOTES if any\\n        updateBid({\\n          index: index_of_position(pos - 1),\\n          reset: false, // top up old value with received amount\\n          amount: order.gives, // in QUOTES\\n          pivotId: 0\\n        });\\n        if (pos - 1 <= mStr.min_buffer) {\\n          emit BidAtMaxPosition();\\n        }\\n        return true;\\n      } else {\\n        // Ask cannot be at Pmin unless a shift has eliminated all bids\\n        revert(\\\"Mango/BidOutOfRange\\\");\\n      }\\n    } else {\\n      // Bid offer (`this` contract just bought some BASE)\\n\\n      if (!super.__posthookSuccess__(order)) {\\n        // residual could not be reposted --either below density or Mango went out of provision on Mangrove\\n        mStr.pending_quote = __residualGives__(order); // this includes previous `PENDING_QUOTE`\\n      } else {\\n        mStr.pending_quote = 0;\\n      }\\n\\n      uint index = mStr.index_of_bid[order.offerId];\\n      // offer was not posted using newOffer\\n      uint pos = position_of_index(index);\\n      // ask for some QUOTE tokens in exchange of the received BASE tokens @ pos+1\\n      if (pos < NSLOTS - 1) {\\n        // updateAsk will include mStr.pending_baseS if any\\n        updateAsk({\\n          index: index_of_position(pos + 1),\\n          reset: false, // top up old value with received amount\\n          amount: order.gives, // in BASE\\n          pivotId: 0\\n        });\\n        if (pos + 1 >= NSLOTS - mStr.min_buffer) {\\n          emit AskAtMinPosition();\\n        }\\n        return true;\\n      } else {\\n        revert(\\\"Mango/AskOutOfRange\\\");\\n      }\\n    }\\n  }\\n\\n  function updateBid(\\n    uint index,\\n    bool reset, // whether this call is part of an `initialize` procedure\\n    uint amount, // in QUOTE tokens\\n    uint pivotId\\n  ) internal {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    // outbound : QUOTE, inbound: BASE\\n    P.Offer.t offer = MGV.offers($(QUOTE), $(BASE), mStr.bids[index]);\\n\\n    uint position = position_of_index(index);\\n\\n    uint new_gives = reset\\n      ? amount\\n      : (amount + offer.gives() + mStr.pending_quote);\\n    uint new_wants = bases_of_position(position, new_gives);\\n\\n    uint pivot;\\n    if (offer.gives() == 0) {\\n      // offer was not live\\n      if (pivotId != 0) {\\n        pivot = pivotId;\\n      } else {\\n        if (position > 0) {\\n          pivot = mStr.bids[index_of_position(position - 1)]; // if this offer is no longer in the book will start form best\\n        } else {\\n          pivot = offer.prev(); // trying previous offer on Mangrove as a pivot\\n        }\\n      }\\n    } else {\\n      // offer is live, so reusing its id for pivot\\n      pivot = mStr.bids[index];\\n    }\\n    safeWriteOffer({\\n      index: index,\\n      outbound_tkn: QUOTE,\\n      wants: new_wants,\\n      gives: new_gives,\\n      withPending: !reset,\\n      pivotId: pivot\\n    });\\n  }\\n\\n  function updateAsk(\\n    uint index,\\n    bool reset, // whether this call is part of an `initialize` procedure\\n    uint amount, // in BASE tokens\\n    uint pivotId\\n  ) internal {\\n    MangoStorage.Layout storage mStr = MangoStorage.get_storage();\\n    // outbound : BASE, inbound: QUOTE\\n    P.Offer.t offer = MGV.offers($(BASE), $(QUOTE), mStr.asks[index]);\\n    uint position = position_of_index(index);\\n\\n    uint new_gives = reset\\n      ? amount\\n      : (amount + offer.gives() + mStr.pending_base); // in BASE\\n    uint new_wants = quotes_of_position(position, new_gives);\\n\\n    uint pivot;\\n    if (offer.gives() == 0) {\\n      // offer was not live\\n      if (pivotId != 0) {\\n        pivot = pivotId;\\n      } else {\\n        if (position > 0) {\\n          pivot = mStr.asks[index_of_position(position - 1)]; // if this offer is no longer in the book will start form best\\n        } else {\\n          pivot = offer.prev(); // trying previous offer on Mangrove as a pivot\\n        }\\n      }\\n    } else {\\n      // offer is live, so reusing its id for pivot\\n      pivot = mStr.asks[index];\\n    }\\n    safeWriteOffer({\\n      index: index,\\n      outbound_tkn: BASE,\\n      wants: new_wants,\\n      gives: new_gives,\\n      withPending: !reset,\\n      pivotId: pivot\\n    });\\n  }\\n}\\n\",\"keccak256\":\"0xb9f82cb18c23ea0bc701d500e1baa52d0523cd52752a597d2152c0084c0f9e94\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/SingleUser/Deployable/MarketMaking/Mango/MangoStorage.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// MangoStorage.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"contracts/Strategies/interfaces/ISourcer.sol\\\";\\n\\nlibrary MangoStorage {\\n  /** Strat specific events */\\n\\n  struct Layout {\\n    uint[] asks;\\n    uint[] bids;\\n    // amount of base (resp quote) tokens that failed to be published on the Market\\n    uint pending_base;\\n    uint pending_quote;\\n    // offerId -> index in ASKS/BIDS maps\\n    mapping(uint => uint) index_of_bid; // bidId -> index\\n    mapping(uint => uint) index_of_ask; // askId -> index\\n    // Price shift is in number of price increments (or decrements when shift < 0) since deployment of the strat.\\n    // e.g. for arithmetic progression, `shift = -3` indicates that Pmin is now (`QUOTE_0` - 3*`delta`)/`BASE_0`\\n    int shift;\\n    // parameter for price progression\\n    // NB for arithmetic progression, price(i+1) = price(i) + delta/`BASE_0`\\n    uint delta; // quote increment\\n    // triggers `__boundariesReached__` whenever amounts of bids/asks is below `min_buffer`\\n    uint min_buffer;\\n    // puts the strat into a (cancellable) state where it reneges on all incoming taker orders.\\n    // NB reneged offers are removed from Mangrove's OB\\n    bool paused;\\n    // Base and quote token treasuries\\n    ISourcer liquidity_sourcer;\\n  }\\n\\n  function get_storage() internal pure returns (Layout storage st) {\\n    bytes32 storagePosition = keccak256(\\\"Mangrove.MangoStorage.Layout\\\");\\n    assembly {\\n      st.slot := storagePosition\\n    }\\n  }\\n\\n  function revertWithData(bytes memory retdata) internal pure {\\n    if (retdata.length == 0) {\\n      revert(\\\"MangoStorage/revertNoReason\\\");\\n    }\\n    assembly {\\n      revert(add(retdata, 32), mload(retdata))\\n    }\\n  }\\n\\n  function quote_price_jumps(\\n    uint delta,\\n    uint position,\\n    uint quote_min\\n  ) internal pure returns (uint) {\\n    return delta * position + quote_min;\\n  }\\n}\\n\",\"keccak256\":\"0xcb88d28170e656a881bd2f6827bc2088d0a155f57319f1b774b2388b7c2fb167\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/SingleUser/Deployable/MarketMaking/Sourcers/EOASourcer.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n//EOASourcer.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"contracts/Strategies/utils/AccessControlled.sol\\\";\\nimport \\\"contracts/Strategies/utils/TransferLib.sol\\\";\\nimport \\\"contracts/Strategies/interfaces/ISourcer.sol\\\";\\n\\ncontract EOASourcer is ISourcer, AccessControlled {\\n  address public immutable SOURCE;\\n  address public immutable MAKER;\\n\\n  constructor(address spenderContract, address deployer)\\n    AccessControlled(deployer)\\n  {\\n    MAKER = spenderContract;\\n    SOURCE = deployer;\\n  }\\n\\n  // requires approval of SOURCE deployer\\n  function pull(IEIP20 token, uint amount)\\n    external\\n    override\\n    onlyCaller(MAKER)\\n    returns (uint missing)\\n  {\\n    if (TransferLib.transferTokenFrom(token, SOURCE, MAKER, amount)) {\\n      return 0;\\n    } else {\\n      return amount;\\n    }\\n  }\\n\\n  // requires approval of Maker\\n  function flush(IEIP20[] calldata tokens) external override onlyCaller(MAKER) {\\n    for (uint i = 0; i < tokens.length; i++) {\\n      uint amount = tokens[i].balanceOf(MAKER);\\n      require(\\n        TransferLib.transferTokenFrom(tokens[i], MAKER, SOURCE, amount),\\n        \\\"EOASourcer/flush/transferFail\\\"\\n      );\\n    }\\n  }\\n\\n  function balance(IEIP20 token) external view override returns (uint) {\\n    return token.balanceOf(SOURCE);\\n  }\\n}\\n\",\"keccak256\":\"0xa9419fe2cb5eb5eb381370ed8c3ea7193ae8158fbbf396f171ef569cf323609d\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/SingleUser/Persistent.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// Persistent.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport \\\"./SingleUser.sol\\\";\\n\\n/** Strat class with specialized hooks that repost offer residual after a partial fill */\\n/** (Single user variant) */\\n\\nabstract contract Persistent is SingleUser {\\n\\n  /** Persistent class specific hooks. */\\n\\n  // Hook that defines how much inbound tokens the residual offer should ask for when repositing itself on the Offer List.\\n  // default is to repost the old amount minus the partial fill\\n  function __residualWants__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (uint)\\n  {\\n    return order.offer.wants() - order.gives;\\n  }\\n\\n  // Hook that defines how much outbound tokens the residual offer should promise for when repositing itself on the Offer List.\\n  // default is to repost the old required amount minus the partial fill\\n  // NB this could produce an offer below the density. Offer Maker should perform a density check at repost time if not willing to fail reposting.\\n  function __residualGives__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (uint)\\n  {\\n    return order.offer.gives() - order.wants;\\n  }\\n\\n  // Specializing this hook to repost offer residual when trade was a success\\n  function __posthookSuccess__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    uint new_gives = __residualGives__(order);\\n    // Density check would be too gas costly.\\n    // We only treat the special case of `gives==0` (total fill).\\n    // Offer below the density will cause Mangrove to throw (revert is catched to log information)\\n    if (new_gives == 0) {\\n      return true;\\n    }\\n    uint new_wants = __residualWants__(order);\\n    try\\n      MGV.updateOffer(\\n        order.outbound_tkn,\\n        order.inbound_tkn,\\n        new_wants,\\n        new_gives,\\n        order.offerDetail.gasreq(),\\n        order.offerDetail.gasprice(),\\n        order.offer.next(),\\n        order.offerId\\n      )\\n    {\\n      return true;\\n    } catch (bytes memory reason) {\\n      // `newOffer` can fail when Mango is under provisioned or if `offer.gives` is below density\\n      // Log incident only if under provisioned\\n      if (keccak256(reason) == keccak256(\\\"mgv/insufficientProvision\\\")) {\\n        emit LogIncident(\\n          IEIP20(order.outbound_tkn),\\n          IEIP20(order.inbound_tkn),\\n          order.offerId,\\n          \\\"Persistent/hook/outOfProvision\\\"\\n        );\\n      }\\n      return false;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5d19cecf0172debcfa0271d824d39fd7391f8af124ea2e6c690c55b8ce72aa50\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/SingleUser/SingleUser.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// MangroveOffer.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"../MangroveOffer.sol\\\";\\nimport \\\"../../utils/TransferLib.sol\\\";\\n\\n/// MangroveOffer is the basic building block to implement a reactive offer that interfaces with the Mangrove\\nabstract contract SingleUser is MangroveOffer {\\n  /// transfers token stored in `this` contract to some recipient address\\n\\n  function withdrawToken(\\n    IEIP20 token,\\n    address receiver,\\n    uint amount\\n  ) external override onlyAdmin returns (bool success) {\\n    require(receiver != address(0), \\\"SingleUser/withdrawToken/0xReceiver\\\");\\n    return TransferLib.transferToken(IEIP20(token), receiver, amount);\\n  }\\n\\n  /// withdraws ETH from the bounty vault of the Mangrove.\\n  /// ETH are sent to `receiver`\\n  function withdrawFromMangrove(address payable receiver, uint amount)\\n    external\\n    override\\n    onlyAdmin\\n    returns (bool)\\n  {\\n    require(receiver != address(0), \\\"SingleUser/withdrawMGV/0xReceiver\\\");\\n    return _withdrawFromMangrove(receiver, amount);\\n  }\\n\\n  // Posting a new offer on the (`outbound_tkn,inbound_tkn`) Offer List of Mangrove.\\n  // NB #1: Offer maker maker MUST:\\n  // * Approve Mangrove for at least `gives` amount of `outbound_tkn`.\\n  // * Make sure that `this` contract has enough WEI provision on Mangrove to cover for the new offer bounty (function is payable so that caller can increase provision prior to posting the new offer)\\n  // * Make sure that `gasreq` and `gives` yield a sufficient offer density\\n  // NB #2: This function will revert when the above points are not met\\n  function newOffer(MakerOrder calldata mko)\\n    external\\n    payable\\n    override\\n    onlyAdmin\\n    returns (uint offerId)\\n  {\\n    return\\n      MGV.newOffer{value: msg.value}(\\n        address(mko.outbound_tkn),\\n        address(mko.inbound_tkn),\\n        mko.wants,\\n        mko.gives,\\n        mko.gasreq,\\n        mko.gasprice,\\n        mko.pivotId\\n      );\\n  }\\n\\n  // Updates offer `offerId` on the (`outbound_tkn,inbound_tkn`) Offer List of Mangrove.\\n  // NB #1: Offer maker MUST:\\n  // * Make sure that offer maker has enough WEI provision on Mangrove to cover for the new offer bounty in case Mangrove gasprice has increased (function is payable so that caller can increase provision prior to updating the offer)\\n  // * Make sure that `gasreq` and `gives` yield a sufficient offer density\\n  // NB #2: This function will revert when the above points are not met\\n  function updateOffer(MakerOrder calldata mko, uint offerId)\\n    external\\n    payable\\n    override\\n    onlyAdmin\\n  {\\n    return\\n      MGV.updateOffer{value: msg.value}(\\n        address(mko.outbound_tkn),\\n        address(mko.inbound_tkn),\\n        mko.wants,\\n        mko.gives,\\n        mko.gasreq,\\n        mko.gasprice,\\n        mko.pivotId,\\n        offerId\\n      );\\n  }\\n\\n  // Retracts `offerId` from the (`outbound_tkn`,`inbound_tkn`) Offer list of Mangrove.\\n  // Function call will throw if `this` contract is not the owner of `offerId`.\\n  // Returned value is the amount of ethers that have been credited to `this` contract balance on Mangrove (always 0 if `deprovision=false`)\\n  // NB `mgvOrAdmin` modifier guarantees that this function is either called by contract admin or during trade execution by Mangrove\\n  function retractOffer(\\n    IEIP20 outbound_tkn,\\n    IEIP20 inbound_tkn,\\n    uint offerId,\\n    bool deprovision // if set to `true`, `this` contract will receive the remaining provision (in WEI) associated to `offerId`.\\n  ) public override mgvOrAdmin returns (uint) {\\n    return\\n      MGV.retractOffer(\\n        address(outbound_tkn),\\n        address(inbound_tkn),\\n        offerId,\\n        deprovision\\n      );\\n  }\\n\\n  function getMissingProvision(\\n    IEIP20 outbound_tkn,\\n    IEIP20 inbound_tkn,\\n    uint gasreq,\\n    uint gasprice,\\n    uint offerId\\n  ) public view override returns (uint) {\\n    return\\n      _getMissingProvision(\\n        MGV.balanceOf(address(this)), // current provision of offer maker is simply the current provision of `this` contract on Mangrove\\n        outbound_tkn,\\n        inbound_tkn,\\n        gasreq,\\n        gasprice,\\n        offerId\\n      );\\n  }\\n\\n  // default `__put__` hook for `SingleUser` strats: received tokens are juste stored in `this` contract balance of `inbound` tokens.\\n  function __put__(\\n    uint, /*amount*/\\n    ML.SingleOrder calldata\\n  ) internal virtual override returns (uint) {\\n    return 0;\\n  }\\n\\n  // default `__get__` hook for `SingleUser` strats: promised liquidity is obtained from `this` contract balance of `outbound` tokens\\n  function __get__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (uint)\\n  {\\n    uint balance = IEIP20(order.outbound_tkn).balanceOf(address(this));\\n    if (balance >= amount) {\\n      return 0;\\n    } else {\\n      return (amount - balance);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xacb63ee50baef19259eb22813d4eb162828f1bab3dee08663210f48e4d2b9f16\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/interfaces/IEIP20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\n// IERC20.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* `MgvLib` contains data structures returned by external calls to Mangrove and the interfaces it uses for its own external calls. */\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\ninterface IEIP20 {\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address account) external view returns (uint);\\n\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint);\\n\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n\\n  /// for wETH contract\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x3b0d162261f57baec15468d7a195a881e0f82c205998d9521812b96278de4f99\",\"license\":\"Unlicense\"},\"contracts/Strategies/interfaces/IMangrove.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.2. SEE SOURCE BELOW. !!\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\nimport {MgvLib as ML, P, IMaker} from \\\"../../MgvLib.sol\\\";\\n\\ninterface IMangrove {\\n  event Approval(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address owner,\\n    address spender,\\n    uint value\\n  );\\n  event Credit(address indexed maker, uint amount);\\n  event Debit(address indexed maker, uint amount);\\n  event Kill();\\n  event NewMgv();\\n  event OfferFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id,\\n    address taker,\\n    uint takerWants,\\n    uint takerGives,\\n    bytes32 mgvData\\n  );\\n  event OfferRetract(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id\\n  );\\n  event OfferSuccess(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id,\\n    address taker,\\n    uint takerWants,\\n    uint takerGives\\n  );\\n  event OfferWrite(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address maker,\\n    uint wants,\\n    uint gives,\\n    uint gasprice,\\n    uint gasreq,\\n    uint id,\\n    uint prev\\n  );\\n  event OrderComplete(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address indexed taker,\\n    uint takerGot,\\n    uint takerGave,\\n    uint penalty\\n  );\\n  event OrderStart();\\n  event PosthookFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offerId\\n  );\\n  event SetActive(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    bool value\\n  );\\n  event SetDensity(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint value\\n  );\\n  event SetFee(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint value\\n  );\\n  event SetGasbase(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offer_gasbase\\n  );\\n  event SetGasmax(uint value);\\n  event SetGasprice(uint value);\\n  event SetGovernance(address value);\\n  event SetMonitor(address value);\\n  event SetNotify(bool value);\\n  event SetUseOracle(bool value);\\n  event SetVault(address value);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n  function activate(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fee,\\n    uint density,\\n    uint offer_gasbase\\n  ) external;\\n\\n  function allowances(\\n    address,\\n    address,\\n    address,\\n    address\\n  ) external view returns (uint);\\n\\n  function approve(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    address spender,\\n    uint value\\n  ) external returns (bool);\\n\\n  function balanceOf(address) external view returns (uint);\\n\\n  function best(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (uint);\\n\\n  function config(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (P.Global.t, P.Local.t);\\n\\n  function configInfo(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (P.GlobalStruct memory global, P.LocalStruct memory local);\\n\\n  function deactivate(address outbound_tkn, address inbound_tkn) external;\\n\\n  function flashloan(ML.SingleOrder memory sor, address taker)\\n    external\\n    returns (uint gasused);\\n\\n  function fund(address maker) external payable;\\n\\n  function fund() external payable;\\n\\n  function governance() external view returns (address);\\n\\n  function isLive(P.Offer.t offer) external pure returns (bool);\\n\\n  function kill() external;\\n\\n  function locked(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (bool);\\n\\n  function marketOrder(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint takerWants,\\n    uint takerGives,\\n    bool fillWants\\n  )\\n    external\\n    returns (\\n      uint,\\n      uint,\\n      uint\\n    );\\n\\n  function marketOrderFor(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint takerWants,\\n    uint takerGives,\\n    bool fillWants,\\n    address taker\\n  )\\n    external\\n    returns (\\n      uint takerGot,\\n      uint takerGave,\\n      uint bounty\\n    );\\n\\n  function newOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint wants,\\n    uint gives,\\n    uint gasreq,\\n    uint gasprice,\\n    uint pivotId\\n  ) external payable returns (uint);\\n\\n  function nonces(address) external view returns (uint);\\n\\n  function offerDetails(\\n    address,\\n    address,\\n    uint\\n  ) external view returns (P.OfferDetail.t);\\n\\n  function offerInfo(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId\\n  )\\n    external\\n    view\\n    returns (\\n      P.OfferStruct memory offer,\\n      P.OfferDetailStruct memory offerDetail\\n    );\\n\\n  function offers(\\n    address,\\n    address,\\n    uint\\n  ) external view returns (P.Offer.t);\\n\\n  function permit(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function retractOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId,\\n    bool deprovision\\n  ) external returns (uint provision);\\n\\n  function setDensity(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint density\\n  ) external;\\n\\n  function setFee(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fee\\n  ) external;\\n\\n  function setGasbase(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offer_gasbase\\n  ) external;\\n\\n  function setGasmax(uint gasmax) external;\\n\\n  function setGasprice(uint gasprice) external;\\n\\n  function setGovernance(address governanceAddress) external;\\n\\n  function setMonitor(address monitor) external;\\n\\n  function setNotify(bool notify) external;\\n\\n  function setUseOracle(bool useOracle) external;\\n\\n  function setVault(address vaultAddress) external;\\n\\n  function snipes(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint[4][] memory targets,\\n    bool fillWants\\n  )\\n    external\\n    returns (\\n      uint,\\n      uint,\\n      uint,\\n      uint\\n    );\\n\\n  function snipesFor(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint[4][] memory targets,\\n    bool fillWants,\\n    address taker\\n  )\\n    external\\n    returns (\\n      uint successes,\\n      uint takerGot,\\n      uint takerGave,\\n      uint bounty\\n    );\\n\\n  function updateOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint wants,\\n    uint gives,\\n    uint gasreq,\\n    uint gasprice,\\n    uint pivotId,\\n    uint offerId\\n  ) external payable;\\n\\n  function vault() external view returns (address);\\n\\n  function withdraw(uint amount) external returns (bool noRevert);\\n\\n  receive() external payable;\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"governance\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasmax\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Approval\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Credit\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Debit\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"Kill\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"NewMgv\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerWants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"mgvData\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"OfferFail\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"OfferRetract\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerWants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGives\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"OfferSuccess\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasreq\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"prev\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"OfferWrite\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGot\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGave\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"penalty\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"OrderComplete\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"OrderStart\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PosthookFail\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"SetActive\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetDensity\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetFee\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetGasbase\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetGasmax\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetGasprice\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SetGovernance\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SetMonitor\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"SetNotify\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"SetUseOracle\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SetVault\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DOMAIN_SEPARATOR\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"PERMIT_TYPEHASH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"density\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"activate\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"allowances\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"approve\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"best\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"config\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"Global.t\\\",\\\"name\\\":\\\"_global\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"Local.t\\\",\\\"name\\\":\\\"_local\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"configInfo\\\",\\\"outputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"monitor\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"useOracle\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"notify\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasmax\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"dead\\\",\\\"type\\\":\\\"bool\\\"}],\\\"internalType\\\":\\\"struct GlobalStruct\\\",\\\"name\\\":\\\"global\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"active\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"density\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"lock\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"best\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"last\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct LocalStruct\\\",\\\"name\\\":\\\"local\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"deactivate\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"Offer.t\\\",\\\"name\\\":\\\"offer\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"OfferDetail.t\\\",\\\"name\\\":\\\"offerDetail\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"Global.t\\\",\\\"name\\\":\\\"global\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"Local.t\\\",\\\"name\\\":\\\"local\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct MgvLib.SingleOrder\\\",\\\"name\\\":\\\"sor\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"flashloan\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasused\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"fund\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"fund\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"governance\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"Offer.t\\\",\\\"name\\\":\\\"offer\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"isLive\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"pure\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"kill\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"locked\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerWants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"fillWants\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"marketOrder\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerWants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"fillWants\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"marketOrderFor\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGot\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGave\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"bounty\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasreq\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pivotId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"newOffer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"nonces\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerDetails\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"OfferDetail.t\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerInfo\\\",\\\"outputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"prev\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"next\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct OfferStruct\\\",\\\"name\\\":\\\"offer\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasreq\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct OfferDetailStruct\\\",\\\"name\\\":\\\"offerDetail\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offers\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"Offer.t\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"permit\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"deprovision\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"retractOffer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"provision\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"density\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setDensity\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setFee\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setGasbase\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasmax\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setGasmax\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setGasprice\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"governanceAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setGovernance\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"monitor\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setMonitor\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"notify\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setNotify\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"useOracle\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setUseOracle\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"vaultAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setVault\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[4][]\\\",\\\"name\\\":\\\"targets\\\",\\\"type\\\":\\\"uint256[4][]\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"fillWants\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"snipes\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[4][]\\\",\\\"name\\\":\\\"targets\\\",\\\"type\\\":\\\"uint256[4][]\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"fillWants\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"snipesFor\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"successes\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGot\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGave\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"bounty\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasreq\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pivotId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"updateOffer\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"vault\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"noRevert\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"receive\\\"}]\\n*/\\n\",\"keccak256\":\"0xb9a81e17ef06bcb026f6736eb376aeda7e08e2924ece49d58025d8bc1fa356f6\",\"license\":\"UNLICENSED\"},\"contracts/Strategies/interfaces/IOfferLogic.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// SwingingMarketMaker.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\nimport \\\"./IMangrove.sol\\\";\\nimport \\\"./IEIP20.sol\\\";\\n\\ninterface IOfferLogic is IMaker {\\n  ///////////////////\\n  // MangroveOffer //\\n  ///////////////////\\n\\n  /** @notice Events */\\n\\n  // Log incident (during post trade execution)\\n  event LogIncident(\\n    IEIP20 indexed outbound_tkn,\\n    IEIP20 indexed inbound_tkn,\\n    uint indexed offerId,\\n    bytes32 reason\\n  );\\n\\n  // Offer logic default gas required --value is used in update and new offer if maxUint is given\\n  function OFR_GASREQ() external returns (uint);\\n\\n  // returns missing provision on Mangrove, should `offerId` be reposted using `gasreq` and `gasprice` parameters\\n  // if `offerId` is not in the `outbound_tkn,inbound_tkn` offer list, the totality of the necessary provision is returned\\n  function getMissingProvision(\\n    IEIP20 outbound_tkn,\\n    IEIP20 inbound_tkn,\\n    uint gasreq,\\n    uint gasprice,\\n    uint offerId\\n  ) external view returns (uint);\\n\\n  // Changing OFR_GASREQ of the logic\\n  function setGasreq(uint gasreq) external;\\n\\n  function withdrawToken(\\n    IEIP20 token,\\n    address receiver,\\n    uint amount\\n  ) external returns (bool success);\\n\\n  function approveMangrove(IEIP20 outbound_tkn, uint amount) external;\\n\\n  function withdrawFromMangrove(address payable receiver, uint amount)\\n    external\\n    returns (bool noRevert);\\n\\n  struct MakerOrder {\\n    IEIP20 outbound_tkn; // address of the ERC20 contract managing outbound tokens\\n    IEIP20 inbound_tkn; // address of the ERC20 contract managing outbound tokens\\n    uint wants; // amount of `inbound_tkn` required for full delivery\\n    uint gives; // max amount of `outbound_tkn` promised by the offer\\n    uint gasreq; // max gas required by the offer when called. If maxUint256 is used here, default `OFR_GASREQ` will be considered instead\\n    uint gasprice; // gasprice that should be consider to compute the bounty (Mangrove's gasprice will be used if this value is lower)\\n    uint pivotId;\\n  }\\n\\n  function newOffer(MakerOrder calldata mko)\\n    external\\n    payable\\n    returns (uint offerId);\\n\\n  //returns 0 if updateOffer failed (for instance if offer is underprovisioned) otherwise returns `offerId`\\n  function updateOffer(MakerOrder calldata mko, uint offerId) external payable;\\n\\n  function retractOffer(\\n    IEIP20 outbound_tkn,\\n    IEIP20 inbound_tkn,\\n    uint offerId,\\n    bool deprovision // if set to `true`, `this` contract will receive the remaining provision (in WEI) associated to `offerId`.\\n  ) external returns (uint received);\\n}\\n\",\"keccak256\":\"0xc433711b83d5851e84166b91f3ff8f2eb0e21da6c82cbce62da8ea743df96ad1\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/interfaces/ISourcer.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n//ITreasury.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"./IEIP20.sol\\\";\\n\\ninterface ISourcer {\\n  // gets `amount` of `token`s from liquidity source\\n  function pull(IEIP20 token, uint amount) external returns (uint);\\n\\n  // deposits `amount` of `token`s into liquidity source\\n  function flush(IEIP20[] calldata tokens) external;\\n\\n  // checks amount of `token`s available in the liquidity source\\n  function balance(IEIP20 token) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd55e4037df9ba06f74e26a15befff54c2506d176df638b00ab64574bf171b4cf\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/utils/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// AccessedControlled.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport {AccessControlledStorage as ACS} from \\\"./AccessControlledStorage.sol\\\";\\n\\ncontract AccessControlled {\\n  constructor(address admin_) {\\n    require(admin_ != address(0), \\\"accessControlled/0xAdmin\\\");\\n    ACS.get_storage().admin = admin_;\\n  }\\n\\n  modifier onlyCaller(address caller) {\\n    require(\\n      caller == address(0) || msg.sender == caller,\\n      \\\"AccessControlled/Invalid\\\"\\n    );\\n    _;\\n  }\\n\\n  function admin() public view returns (address) {\\n    return ACS.get_storage().admin;\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == admin(), \\\"AccessControlled/Invalid\\\");\\n    _;\\n  }\\n\\n  function setAdmin(address _admin) external onlyAdmin {\\n    ACS.get_storage().admin = _admin;\\n  }\\n}\\n\",\"keccak256\":\"0x4c1e8dd0b9a324f5eed478c0edac4273049ac140f82ea35f95cebab83888326a\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/utils/AccessControlledStorage.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// AccessedControlled.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nlibrary AccessControlledStorage {\\n  struct Layout {\\n    address admin;\\n  }\\n\\n  function get_storage() internal pure returns (Layout storage st) {\\n    bytes32 storagePosition = keccak256(\\\"Mangrove.AccessControlledStorage\\\");\\n    assembly {\\n      st.slot := storagePosition\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4e10e8d96aa1744ee213fe545adc1af495f608ca923463f27134f3a5e6e4d43d\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/utils/TransferLib.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// SimpleOrale.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IEIP20.sol\\\";\\n\\nlibrary TransferLib {\\n  // utils\\n  function transferToken(\\n    IEIP20 token,\\n    address recipient,\\n    uint amount\\n  ) internal returns (bool) {\\n    if (amount == 0 || recipient == address(this)) {\\n      return true;\\n    }\\n    (bool success, bytes memory data) = address(token).call(\\n      abi.encodeWithSelector(token.transfer.selector, recipient, amount)\\n    );\\n    return (success && (data.length == 0 || abi.decode(data, (bool))));\\n  }\\n\\n  function transferTokenFrom(\\n    IEIP20 token,\\n    address spender,\\n    address recipient,\\n    uint amount\\n  ) internal returns (bool) {\\n    if (amount == 0 || spender == recipient) {\\n      return true;\\n    }\\n    (bool success, bytes memory data) = address(token).call(\\n      abi.encodeWithSelector(\\n        token.transferFrom.selector,\\n        spender,\\n        recipient,\\n        amount\\n      )\\n    );\\n    return (success && (data.length == 0 || abi.decode(data, (bool))));\\n  }\\n}\\n\",\"keccak256\":\"0xf7755f011ae061f39244cf129c887991aea1fbb508f76693f0ef9fd06c6ae2a6\",\"license\":\"BSD-2-Clause\"},\"contracts/preprocessed/MgvGlobal.post.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\n// SPDX-License-Identifier: Unlicense\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n// fields are of the form [name,bits,type]\\n\\nimport \\\"./MgvStructs.post.sol\\\";\\n\\n// struct_defs are of the form [name,obj]\\n\\n/* ************************************************** *\\n            GENERATED FILE. DO NOT EDIT.\\n * ************************************************** */\\n\\n//some type safety for each struct\\ntype t is uint;\\nusing Library for t global;\\n\\nuint constant monitor_bits   = 160;\\nuint constant useOracle_bits = 8;\\nuint constant notify_bits    = 8;\\nuint constant gasprice_bits  = 16;\\nuint constant gasmax_bits    = 24;\\nuint constant dead_bits      = 8;\\n\\nuint constant monitor_before   = 0;\\nuint constant useOracle_before = monitor_before   + monitor_bits  ;\\nuint constant notify_before    = useOracle_before + useOracle_bits;\\nuint constant gasprice_before  = notify_before    + notify_bits   ;\\nuint constant gasmax_before    = gasprice_before  + gasprice_bits ;\\nuint constant dead_before      = gasmax_before    + gasmax_bits   ;\\n\\nuint constant monitor_mask   = 0x0000000000000000000000000000000000000000ffffffffffffffffffffffff;\\nuint constant useOracle_mask = 0xffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff;\\nuint constant notify_mask    = 0xffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff;\\nuint constant gasprice_mask  = 0xffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffff;\\nuint constant gasmax_mask    = 0xffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffffff;\\nuint constant dead_mask      = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff;\\n\\nlibrary Library {\\n  function to_struct(t __packed) internal pure returns (GlobalStruct memory __s) { unchecked {\\n    __s.monitor = address(uint160((t.unwrap(__packed) << monitor_before) >> (256-monitor_bits)));\\n    __s.useOracle = (((t.unwrap(__packed) << useOracle_before) >> (256-useOracle_bits)) > 0);\\n    __s.notify = (((t.unwrap(__packed) << notify_before) >> (256-notify_bits)) > 0);\\n    __s.gasprice = (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n    __s.gasmax = (t.unwrap(__packed) << gasmax_before) >> (256-gasmax_bits);\\n    __s.dead = (((t.unwrap(__packed) << dead_before) >> (256-dead_bits)) > 0);\\n  }}\\n\\n  function eq(t __packed1, t __packed2) internal pure returns (bool) { unchecked {\\n    return t.unwrap(__packed1) == t.unwrap(__packed2);\\n  }}\\n\\n  function unpack(t __packed) internal pure returns (address __monitor, bool __useOracle, bool __notify, uint __gasprice, uint __gasmax, bool __dead) { unchecked {\\n    __monitor = address(uint160((t.unwrap(__packed) << monitor_before) >> (256-monitor_bits)));\\n    __useOracle = (((t.unwrap(__packed) << useOracle_before) >> (256-useOracle_bits)) > 0);\\n    __notify = (((t.unwrap(__packed) << notify_before) >> (256-notify_bits)) > 0);\\n    __gasprice = (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n    __gasmax = (t.unwrap(__packed) << gasmax_before) >> (256-gasmax_bits);\\n    __dead = (((t.unwrap(__packed) << dead_before) >> (256-dead_bits)) > 0);\\n  }}\\n\\n  function monitor(t __packed) internal pure returns(address) { unchecked {\\n    return address(uint160((t.unwrap(__packed) << monitor_before) >> (256-monitor_bits)));\\n  }}\\n  function monitor(t __packed,address val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & monitor_mask)\\n                  | ((uint(uint160(val)) << (256-monitor_bits) >> monitor_before)));\\n  }}\\n  function useOracle(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << useOracle_before) >> (256-useOracle_bits)) > 0);\\n  }}\\n  function useOracle(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & useOracle_mask)\\n                  | ((uint_of_bool(val) << (256-useOracle_bits) >> useOracle_before)));\\n  }}\\n  function notify(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << notify_before) >> (256-notify_bits)) > 0);\\n  }}\\n  function notify(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & notify_mask)\\n                  | ((uint_of_bool(val) << (256-notify_bits) >> notify_before)));\\n  }}\\n  function gasprice(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n  }}\\n  function gasprice(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gasprice_mask)\\n                  | ((val << (256-gasprice_bits) >> gasprice_before)));\\n  }}\\n  function gasmax(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gasmax_before) >> (256-gasmax_bits);\\n  }}\\n  function gasmax(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gasmax_mask)\\n                  | ((val << (256-gasmax_bits) >> gasmax_before)));\\n  }}\\n  function dead(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << dead_before) >> (256-dead_bits)) > 0);\\n  }}\\n  function dead(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & dead_mask)\\n                  | ((uint_of_bool(val) << (256-dead_bits) >> dead_before)));\\n  }}\\n}\\n\\nfunction t_of_struct(GlobalStruct memory __s) pure returns (t) { unchecked {\\n  return pack(__s.monitor, __s.useOracle, __s.notify, __s.gasprice, __s.gasmax, __s.dead);\\n}}\\n\\nfunction pack(address __monitor, bool __useOracle, bool __notify, uint __gasprice, uint __gasmax, bool __dead) pure returns (t) { unchecked {\\n  return t.wrap(((((((0\\n                | ((uint(uint160(__monitor)) << (256-monitor_bits)) >> monitor_before))\\n                | ((uint_of_bool(__useOracle) << (256-useOracle_bits)) >> useOracle_before))\\n                | ((uint_of_bool(__notify) << (256-notify_bits)) >> notify_before))\\n                | ((__gasprice << (256-gasprice_bits)) >> gasprice_before))\\n                | ((__gasmax << (256-gasmax_bits)) >> gasmax_before))\\n                | ((uint_of_bool(__dead) << (256-dead_bits)) >> dead_before)));\\n}}\",\"keccak256\":\"0xf7f09db7c51c2a4a7af8f97578d48ac3ecd0411e0f5ffd7374f0e6306d4ec0ff\",\"license\":\"Unlicense\"},\"contracts/preprocessed/MgvLocal.post.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\n// SPDX-License-Identifier: Unlicense\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n// fields are of the form [name,bits,type]\\n\\nimport \\\"./MgvStructs.post.sol\\\";\\n\\n// struct_defs are of the form [name,obj]\\n\\n/* ************************************************** *\\n            GENERATED FILE. DO NOT EDIT.\\n * ************************************************** */\\n\\n//some type safety for each struct\\ntype t is uint;\\nusing Library for t global;\\n\\nuint constant active_bits        = 8;\\nuint constant fee_bits           = 16;\\nuint constant density_bits       = 112;\\nuint constant offer_gasbase_bits = 24;\\nuint constant lock_bits          = 8;\\nuint constant best_bits          = 32;\\nuint constant last_bits          = 32;\\n\\nuint constant active_before        = 0;\\nuint constant fee_before           = active_before        + active_bits       ;\\nuint constant density_before       = fee_before           + fee_bits          ;\\nuint constant offer_gasbase_before = density_before       + density_bits      ;\\nuint constant lock_before          = offer_gasbase_before + offer_gasbase_bits;\\nuint constant best_before          = lock_before          + lock_bits         ;\\nuint constant last_before          = best_before          + best_bits         ;\\n\\nuint constant active_mask        = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\nuint constant fee_mask           = 0xff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\nuint constant density_mask       = 0xffffff0000000000000000000000000000ffffffffffffffffffffffffffffff;\\nuint constant offer_gasbase_mask = 0xffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffff;\\nuint constant lock_mask          = 0xffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff;\\nuint constant best_mask          = 0xffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffff;\\nuint constant last_mask          = 0xffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffff;\\n\\nlibrary Library {\\n  function to_struct(t __packed) internal pure returns (LocalStruct memory __s) { unchecked {\\n    __s.active = (((t.unwrap(__packed) << active_before) >> (256-active_bits)) > 0);\\n    __s.fee = (t.unwrap(__packed) << fee_before) >> (256-fee_bits);\\n    __s.density = (t.unwrap(__packed) << density_before) >> (256-density_bits);\\n    __s.offer_gasbase = (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n    __s.lock = (((t.unwrap(__packed) << lock_before) >> (256-lock_bits)) > 0);\\n    __s.best = (t.unwrap(__packed) << best_before) >> (256-best_bits);\\n    __s.last = (t.unwrap(__packed) << last_before) >> (256-last_bits);\\n  }}\\n\\n  function eq(t __packed1, t __packed2) internal pure returns (bool) { unchecked {\\n    return t.unwrap(__packed1) == t.unwrap(__packed2);\\n  }}\\n\\n  function unpack(t __packed) internal pure returns (bool __active, uint __fee, uint __density, uint __offer_gasbase, bool __lock, uint __best, uint __last) { unchecked {\\n    __active = (((t.unwrap(__packed) << active_before) >> (256-active_bits)) > 0);\\n    __fee = (t.unwrap(__packed) << fee_before) >> (256-fee_bits);\\n    __density = (t.unwrap(__packed) << density_before) >> (256-density_bits);\\n    __offer_gasbase = (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n    __lock = (((t.unwrap(__packed) << lock_before) >> (256-lock_bits)) > 0);\\n    __best = (t.unwrap(__packed) << best_before) >> (256-best_bits);\\n    __last = (t.unwrap(__packed) << last_before) >> (256-last_bits);\\n  }}\\n\\n  function active(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << active_before) >> (256-active_bits)) > 0);\\n  }}\\n  function active(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & active_mask)\\n                  | ((uint_of_bool(val) << (256-active_bits) >> active_before)));\\n  }}\\n  function fee(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << fee_before) >> (256-fee_bits);\\n  }}\\n  function fee(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & fee_mask)\\n                  | ((val << (256-fee_bits) >> fee_before)));\\n  }}\\n  function density(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << density_before) >> (256-density_bits);\\n  }}\\n  function density(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & density_mask)\\n                  | ((val << (256-density_bits) >> density_before)));\\n  }}\\n  function offer_gasbase(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n  }}\\n  function offer_gasbase(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & offer_gasbase_mask)\\n                  | ((val << (256-offer_gasbase_bits) >> offer_gasbase_before)));\\n  }}\\n  function lock(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << lock_before) >> (256-lock_bits)) > 0);\\n  }}\\n  function lock(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & lock_mask)\\n                  | ((uint_of_bool(val) << (256-lock_bits) >> lock_before)));\\n  }}\\n  function best(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << best_before) >> (256-best_bits);\\n  }}\\n  function best(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & best_mask)\\n                  | ((val << (256-best_bits) >> best_before)));\\n  }}\\n  function last(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << last_before) >> (256-last_bits);\\n  }}\\n  function last(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & last_mask)\\n                  | ((val << (256-last_bits) >> last_before)));\\n  }}\\n}\\n\\nfunction t_of_struct(LocalStruct memory __s) pure returns (t) { unchecked {\\n  return pack(__s.active, __s.fee, __s.density, __s.offer_gasbase, __s.lock, __s.best, __s.last);\\n}}\\n\\nfunction pack(bool __active, uint __fee, uint __density, uint __offer_gasbase, bool __lock, uint __best, uint __last) pure returns (t) { unchecked {\\n  return t.wrap((((((((0\\n                | ((uint_of_bool(__active) << (256-active_bits)) >> active_before))\\n                | ((__fee << (256-fee_bits)) >> fee_before))\\n                | ((__density << (256-density_bits)) >> density_before))\\n                | ((__offer_gasbase << (256-offer_gasbase_bits)) >> offer_gasbase_before))\\n                | ((uint_of_bool(__lock) << (256-lock_bits)) >> lock_before))\\n                | ((__best << (256-best_bits)) >> best_before))\\n                | ((__last << (256-last_bits)) >> last_before)));\\n}}\",\"keccak256\":\"0xf2bf1b6b3f8c9bdd04a4c209280a7e511a147f44e23445f642517e5c469e7b4b\",\"license\":\"Unlicense\"},\"contracts/preprocessed/MgvOffer.post.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\n// SPDX-License-Identifier: Unlicense\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n// fields are of the form [name,bits,type]\\n\\nimport \\\"./MgvStructs.post.sol\\\";\\n\\n// struct_defs are of the form [name,obj]\\n\\n/* ************************************************** *\\n            GENERATED FILE. DO NOT EDIT.\\n * ************************************************** */\\n\\n//some type safety for each struct\\ntype t is uint;\\nusing Library for t global;\\n\\nuint constant prev_bits  = 32;\\nuint constant next_bits  = 32;\\nuint constant wants_bits = 96;\\nuint constant gives_bits = 96;\\n\\nuint constant prev_before  = 0;\\nuint constant next_before  = prev_before  + prev_bits ;\\nuint constant wants_before = next_before  + next_bits ;\\nuint constant gives_before = wants_before + wants_bits;\\n\\nuint constant prev_mask  = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\nuint constant next_mask  = 0xffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff;\\nuint constant wants_mask = 0xffffffffffffffff000000000000000000000000ffffffffffffffffffffffff;\\nuint constant gives_mask = 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000;\\n\\nlibrary Library {\\n  function to_struct(t __packed) internal pure returns (OfferStruct memory __s) { unchecked {\\n    __s.prev = (t.unwrap(__packed) << prev_before) >> (256-prev_bits);\\n    __s.next = (t.unwrap(__packed) << next_before) >> (256-next_bits);\\n    __s.wants = (t.unwrap(__packed) << wants_before) >> (256-wants_bits);\\n    __s.gives = (t.unwrap(__packed) << gives_before) >> (256-gives_bits);\\n  }}\\n\\n  function eq(t __packed1, t __packed2) internal pure returns (bool) { unchecked {\\n    return t.unwrap(__packed1) == t.unwrap(__packed2);\\n  }}\\n\\n  function unpack(t __packed) internal pure returns (uint __prev, uint __next, uint __wants, uint __gives) { unchecked {\\n    __prev = (t.unwrap(__packed) << prev_before) >> (256-prev_bits);\\n    __next = (t.unwrap(__packed) << next_before) >> (256-next_bits);\\n    __wants = (t.unwrap(__packed) << wants_before) >> (256-wants_bits);\\n    __gives = (t.unwrap(__packed) << gives_before) >> (256-gives_bits);\\n  }}\\n\\n  function prev(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << prev_before) >> (256-prev_bits);\\n  }}\\n  function prev(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & prev_mask)\\n                  | ((val << (256-prev_bits) >> prev_before)));\\n  }}\\n  function next(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << next_before) >> (256-next_bits);\\n  }}\\n  function next(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & next_mask)\\n                  | ((val << (256-next_bits) >> next_before)));\\n  }}\\n  function wants(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << wants_before) >> (256-wants_bits);\\n  }}\\n  function wants(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & wants_mask)\\n                  | ((val << (256-wants_bits) >> wants_before)));\\n  }}\\n  function gives(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gives_before) >> (256-gives_bits);\\n  }}\\n  function gives(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gives_mask)\\n                  | ((val << (256-gives_bits) >> gives_before)));\\n  }}\\n}\\n\\nfunction t_of_struct(OfferStruct memory __s) pure returns (t) { unchecked {\\n  return pack(__s.prev, __s.next, __s.wants, __s.gives);\\n}}\\n\\nfunction pack(uint __prev, uint __next, uint __wants, uint __gives) pure returns (t) { unchecked {\\n  return t.wrap(((((0\\n                | ((__prev << (256-prev_bits)) >> prev_before))\\n                | ((__next << (256-next_bits)) >> next_before))\\n                | ((__wants << (256-wants_bits)) >> wants_before))\\n                | ((__gives << (256-gives_bits)) >> gives_before)));\\n}}\",\"keccak256\":\"0x7f04c75b33f55748d0a59bb68e333320f096cf65ddfdc60afd42768f89ff1cd2\",\"license\":\"Unlicense\"},\"contracts/preprocessed/MgvOfferDetail.post.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\n// SPDX-License-Identifier: Unlicense\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n// fields are of the form [name,bits,type]\\n\\nimport \\\"./MgvStructs.post.sol\\\";\\n\\n// struct_defs are of the form [name,obj]\\n\\n/* ************************************************** *\\n            GENERATED FILE. DO NOT EDIT.\\n * ************************************************** */\\n\\n//some type safety for each struct\\ntype t is uint;\\nusing Library for t global;\\n\\nuint constant maker_bits         = 160;\\nuint constant gasreq_bits        = 24;\\nuint constant offer_gasbase_bits = 24;\\nuint constant gasprice_bits      = 16;\\n\\nuint constant maker_before         = 0;\\nuint constant gasreq_before        = maker_before         + maker_bits        ;\\nuint constant offer_gasbase_before = gasreq_before        + gasreq_bits       ;\\nuint constant gasprice_before      = offer_gasbase_before + offer_gasbase_bits;\\n\\nuint constant maker_mask         = 0x0000000000000000000000000000000000000000ffffffffffffffffffffffff;\\nuint constant gasreq_mask        = 0xffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffff;\\nuint constant offer_gasbase_mask = 0xffffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffff;\\nuint constant gasprice_mask      = 0xffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffff;\\n\\nlibrary Library {\\n  function to_struct(t __packed) internal pure returns (OfferDetailStruct memory __s) { unchecked {\\n    __s.maker = address(uint160((t.unwrap(__packed) << maker_before) >> (256-maker_bits)));\\n    __s.gasreq = (t.unwrap(__packed) << gasreq_before) >> (256-gasreq_bits);\\n    __s.offer_gasbase = (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n    __s.gasprice = (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n  }}\\n\\n  function eq(t __packed1, t __packed2) internal pure returns (bool) { unchecked {\\n    return t.unwrap(__packed1) == t.unwrap(__packed2);\\n  }}\\n\\n  function unpack(t __packed) internal pure returns (address __maker, uint __gasreq, uint __offer_gasbase, uint __gasprice) { unchecked {\\n    __maker = address(uint160((t.unwrap(__packed) << maker_before) >> (256-maker_bits)));\\n    __gasreq = (t.unwrap(__packed) << gasreq_before) >> (256-gasreq_bits);\\n    __offer_gasbase = (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n    __gasprice = (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n  }}\\n\\n  function maker(t __packed) internal pure returns(address) { unchecked {\\n    return address(uint160((t.unwrap(__packed) << maker_before) >> (256-maker_bits)));\\n  }}\\n  function maker(t __packed,address val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & maker_mask)\\n                  | ((uint(uint160(val)) << (256-maker_bits) >> maker_before)));\\n  }}\\n  function gasreq(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gasreq_before) >> (256-gasreq_bits);\\n  }}\\n  function gasreq(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gasreq_mask)\\n                  | ((val << (256-gasreq_bits) >> gasreq_before)));\\n  }}\\n  function offer_gasbase(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n  }}\\n  function offer_gasbase(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & offer_gasbase_mask)\\n                  | ((val << (256-offer_gasbase_bits) >> offer_gasbase_before)));\\n  }}\\n  function gasprice(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n  }}\\n  function gasprice(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gasprice_mask)\\n                  | ((val << (256-gasprice_bits) >> gasprice_before)));\\n  }}\\n}\\n\\nfunction t_of_struct(OfferDetailStruct memory __s) pure returns (t) { unchecked {\\n  return pack(__s.maker, __s.gasreq, __s.offer_gasbase, __s.gasprice);\\n}}\\n\\nfunction pack(address __maker, uint __gasreq, uint __offer_gasbase, uint __gasprice) pure returns (t) { unchecked {\\n  return t.wrap(((((0\\n                | ((uint(uint160(__maker)) << (256-maker_bits)) >> maker_before))\\n                | ((__gasreq << (256-gasreq_bits)) >> gasreq_before))\\n                | ((__offer_gasbase << (256-offer_gasbase_bits)) >> offer_gasbase_before))\\n                | ((__gasprice << (256-gasprice_bits)) >> gasprice_before)));\\n}}\",\"keccak256\":\"0xc495bffefd52b037f51e92fe88db97b8f41484b0c3d3398a3fa17c1063ca8246\",\"license\":\"Unlicense\"},\"contracts/preprocessed/MgvPack.post.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\n// SPDX-License-Identifier: Unlicense\\n\\n// MgvPack.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* ************************************************** *\\n            GENERATED FILE. DO NOT EDIT.\\n * ************************************************** */\\n\\nimport \\\"./MgvStructs.post.sol\\\";\\n\\nimport \\\"./MgvOffer.post.sol\\\" as Offer;\\nimport \\\"./MgvOfferDetail.post.sol\\\" as OfferDetail;\\nimport \\\"./MgvGlobal.post.sol\\\" as Global;\\nimport \\\"./MgvLocal.post.sol\\\" as Local;\",\"keccak256\":\"0x7dbae2fb61d16bb4e520a9bd7ffdae5f0c880472319096de882d0d27696cb63e\",\"license\":\"Unlicense\"},\"contracts/preprocessed/MgvStructs.post.sol\":{\"content\":\"pragma solidity ^0.8.13;\\n\\n// SPDX-License-Identifier: Unlicense\\n\\n// MgvPack.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* ************************************************** *\\n            GENERATED FILE. DO NOT EDIT.\\n * ************************************************** */\\n\\n/* since you can't convert bool to uint in an expression without conditionals,\\n * we add a file-level function and rely on compiler optimization\\n */\\nfunction uint_of_bool(bool b) pure returns (uint u) {\\n  assembly { u := b }\\n}\\n\\n// struct_defs are of the form [name,obj]\\n\\n// before: Can't put all structs under a 'Structs' library due to bad variable shadowing rules in Solidity\\n// (would generate lots of spurious warnings about a nameclash between Structs.Offer and library Offer for instance)\\n// now: Won't put all structs under a 'Structs' namespace because Mangrove & peripheral code now uses the current namespacing.\\nstruct OfferStruct {\\n  uint prev;\\n  uint next;\\n  uint wants;\\n  uint gives;\\n}\\n\\n// before: Can't put all structs under a 'Structs' library due to bad variable shadowing rules in Solidity\\n// (would generate lots of spurious warnings about a nameclash between Structs.Offer and library Offer for instance)\\n// now: Won't put all structs under a 'Structs' namespace because Mangrove & peripheral code now uses the current namespacing.\\nstruct OfferDetailStruct {\\n  address maker;\\n  uint gasreq;\\n  uint offer_gasbase;\\n  uint gasprice;\\n}\\n\\n// before: Can't put all structs under a 'Structs' library due to bad variable shadowing rules in Solidity\\n// (would generate lots of spurious warnings about a nameclash between Structs.Offer and library Offer for instance)\\n// now: Won't put all structs under a 'Structs' namespace because Mangrove & peripheral code now uses the current namespacing.\\nstruct GlobalStruct {\\n  address monitor;\\n  bool useOracle;\\n  bool notify;\\n  uint gasprice;\\n  uint gasmax;\\n  bool dead;\\n}\\n\\n// before: Can't put all structs under a 'Structs' library due to bad variable shadowing rules in Solidity\\n// (would generate lots of spurious warnings about a nameclash between Structs.Offer and library Offer for instance)\\n// now: Won't put all structs under a 'Structs' namespace because Mangrove & peripheral code now uses the current namespacing.\\nstruct LocalStruct {\\n  bool active;\\n  uint fee;\\n  uint density;\\n  uint offer_gasbase;\\n  bool lock;\\n  uint best;\\n  uint last;\\n}\",\"keccak256\":\"0x24388aeebfcee44c2de381d97fe667f888e873087eafcf0eae538010dff5e775\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405260043610620002495760003560e01c80638456cb591162000134578063ccbbcfc211620000be578063e20ccec31162000089578063e4c34f84116200006c578063e4c34f841462000743578063ec342ad01462000768578063f851a440146200079e57600080fd5b8063e20ccec314620006e6578063e428204d146200070d57600080fd5b8063ccbbcfc2146200064e578063d4a1da081462000673578063d5c3972114620006a9578063d83b00da14620006c157600080fd5b80639d4f8aa911620000ff5780639d4f8aa914620005a6578063ad97db1b14620005df578063aefe84031462000604578063c5dbec38146200062957600080fd5b80638456cb5914620004fd57806399fa5e2d14620005155780639c579839146200054b5780639d4ddea2146200058157600080fd5b806334bd893111620001d35780636c49c32c116200019e5780637ea1a48c11620001815780637ea1a48c14620004aa5780637f84e49414620004c15780638155026714620004d857600080fd5b80636c49c32c1462000460578063704b6c02146200048557600080fd5b806334bd8931146200037f5780633d3d130d14620003a45780635a3e961814620003c95780636465491114620003ee57600080fd5b806312fc41ca116200021457806312fc41ca14620002f65780631722d6e8146200030e5780631ef3755d14620003335780631efa880b146200034b57600080fd5b806301e33667146200025657806302b3d4231462000290578063063df2d214620002aa57806312b495a814620002cf57600080fd5b366200025157005b600080fd5b3480156200026357600080fd5b506200027b620002753660046200390b565b620007ea565b60405190151581526020015b60405180910390f35b3480156200029d57600080fd5b50620002a86200094d565b005b348015620002b757600080fd5b506200027b620002c936600462003951565b62000cda565b348015620002dc57600080fd5b50620002e762000e37565b60405190815260200162000287565b3480156200030357600080fd5b50620002e762000f1a565b3480156200031b57600080fd5b50620002a86200032d366004620039cf565b62000ffd565b3480156200034057600080fd5b50620002a862001252565b3480156200035857600080fd5b50620003706200036a36600462003a74565b62001330565b60405162000287919062003a94565b3480156200038c57600080fd5b50620002a86200039e36600462003b2b565b620014e8565b348015620003b157600080fd5b50620002a8620003c336600462003b59565b6200162b565b348015620003d657600080fd5b50620002a8620003e836600462003bbd565b620017a7565b348015620003fb57600080fd5b507f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8a54610100900473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200162000287565b3480156200046d57600080fd5b50620002e76200047f36600462003c34565b620018c4565b3480156200049257600080fd5b50620002a8620004a436600462003c54565b62001a4a565b620002e7620004bb36600462003c87565b62001b38565b620002a8620004d236600462003ca6565b62001d27565b348015620004e557600080fd5b50620002a8620004f736600462003cd5565b62001ed4565b3480156200050a57600080fd5b50620002a8620020e3565b3480156200052257600080fd5b506200043a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156200055857600080fd5b506200043a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156200058e57600080fd5b50620002a8620005a036600462003b2b565b620021d5565b348015620005b357600080fd5b507f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8a5460ff166200027b565b348015620005ec57600080fd5b50620002e7620005fe36600462003d37565b620022c2565b3480156200061157600080fd5b50620002a86200062336600462003951565b62002495565b3480156200063657600080fd5b50620002a86200064836600462003b2b565b62002668565b3480156200065b57600080fd5b50620002e76200066d36600462003d91565b62002755565b3480156200068057600080fd5b50620002e77f000000000000000000000000000000000000000000000000000000000000000081565b348015620006b657600080fd5b50620002a862002956565b348015620006ce57600080fd5b50620002a8620006e036600462003951565b62002a28565b348015620006f357600080fd5b50620006fe62002d15565b60405162000287919062003dbe565b3480156200071a57600080fd5b507fae7e31c3220e851db9f204a28b279dfe52b973600b0a456991089c220ae7222454620002e7565b3480156200075057600080fd5b50620002e76200076236600462003df1565b62002e00565b3480156200077557600080fd5b506200043a7f000000000000000000000000000000000000000000000000000000000000000081565b348015620007ab57600080fd5b507f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff166200043a565b60006200082b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620008ab5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c6964000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316620009365760405162461bcd60e51b815260206004820152602360248201527f53696e676c65557365722f7769746864726177546f6b656e2f3078526563656960448201527f76657200000000000000000000000000000000000000000000000000000000006064820152608401620008a2565b6200094384848462002f3a565b90505b9392505050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff163314620009d55760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b7f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb813062000a367f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1690565b60405162000a449062003884565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604001604051809103906000f08015801562000a85573d6000803e3d6000fd5b506009820180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff938416810291909117918290556040517f095ea7b30000000000000000000000000000000000000000000000000000000081529104821660048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248201527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801562000b76573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b9c919062003e47565b5060098101546040517f095ea7b300000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff90811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801562000c5d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c83919062003e47565b50600981015460405161010090910473ffffffffffffffffffffffffffffffffffffffff1681527fb3be610edf224007ca5faace2cec8684b0e6147124703e9359d544873fca9d379060200160405180910390a150565b600062000d1b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000d975760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b73ffffffffffffffffffffffffffffffffffffffff831662000e225760405162461bcd60e51b815260206004820152602160248201527f53696e676c65557365722f77697468647261774d47562f30785265636569766560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401620008a2565b62000e2e838362003079565b90505b92915050565b600062000e787f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000ef45760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b507f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb885490565b600062000f5b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000fd75760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b507f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb875490565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff163314806200107857503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b620010c65760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a56aded60e01b898989898989604051602401620011259695949392919062003eb7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051620011b0919062003fea565b600060405180830381855af49150503d8060008114620011ed576040519150601f19603f3d011682016040523d82523d6000602084013e620011f2565b606091505b5091509150816200120e5762001208816200320e565b62001248565b60408051888152602081018890527f997896709b4e932ee42750e2e14ed1f7ab6c60bd911ff567aa2485cf0b20051b910160405180910390a15b5050505050505050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff163314620012da5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b60007f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb815b60090180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6200133a62003892565b60408051831515602480830191909152825180830382018152604490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f663d2e0c000000000000000000000000000000000000000000000000000000001790529151600092839230927f5a3e96180000000000000000000000000000000000000000000000000000000092620013da92910162004008565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905162001465919062003fea565b600060405180830381855afa9150503d8060008114620014a2576040519150601f19603f3d011682016040523d82523d6000602084013e620014a7565b606091505b509150915081620014c357620014bd816200320e565b620014e1565b80806020019051810190620014d9919062004108565b949350505050565b5050919050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff163314806200156357503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b620015b15760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b808162ffffff1614620016075760405162461bcd60e51b815260206004820152601860248201527f6d67764f666665722f6761737265712f6f766572666c6f7700000000000000006044820152606401620008a2565b7fae7e31c3220e851db9f204a28b279dfe52b973600b0a456991089c220ae7222455565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811615806200168557503373ffffffffffffffffffffffffffffffffffffffff8216145b620016d35760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b81602001357f6d67762f747261646553756363657373000000000000000000000000000000000362001710576200170a8362003269565b50505050565b6040830180359062001726906020860162003c54565b73ffffffffffffffffffffffffffffffffffffffff166200174b602086018662003c54565b73ffffffffffffffffffffffffffffffffffffffff167fd2c3f090769d843e1fc2e6ce65d60572e28f9163a5cfccbd6c1725c6a9263f2f85600001356040516200179791815260200190565b60405180910390a460016200170a565b30801580620017cb57503373ffffffffffffffffffffffffffffffffffffffff8216145b620018195760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168585604051620018659291906200421b565b600060405180830381855af49150503d8060008114620018a2576040519150601f19603f3d011682016040523d82523d6000602084013e620018a7565b606091505b509150915081620018bd57620018bd816200320e565b3d60208201f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811615806200192057503373ffffffffffffffffffffffffffffffffffffffff8216145b6200196e5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b7f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8a5460ff1615620019e25760405162461bcd60e51b815260206004820152601660248201527f6d67764f666665722f61626f72742f72656e65676564000000000000000000006044820152606401620008a2565b6000620019f4846080013585620033b9565b111562001a445760405162461bcd60e51b815260206004820152601860248201527f6d67764f666665722f61626f72742f6765744661696c656400000000000000006044820152606401620008a2565b50919050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff16331462001ad25760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600062001b797f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001bf55760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166349f6d2dc3462001c41602086018662003c54565b62001c53604087016020880162003c54565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301528601356044820152606086013560648201526080860135608482015260a086013560a482015260c086013560c482015260e40160206040518083038185885af115801562001cf8573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019062001d1f91906200422b565b90505b919050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff16331462001daf5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016636a4f76913462001dfb602086018662003c54565b62001e0d604087016020880162003c54565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301528601356044820152606086013560648201526080860135608482015260a086013560a482015260c086013560c482015260e48101859052610104016000604051808303818588803b15801562001eb557600080fd5b505af115801562001eca573d6000803e3d6000fd5b50505050505b5050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1633148062001f4f57503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b62001f9d5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ac54d25a60e01b8787878760405160240162001ff8949392919062004245565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905162002083919062003fea565b600060405180830381855af49150503d8060008114620020c0576040519150601f19603f3d011682016040523d82523d6000602084013e620020c5565b606091505b509150915081620020db57620020db816200320e565b505050505050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff163314806200215e57503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b620021ac5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b60017f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb81620012fe565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff163314806200225057503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b6200229e5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b7f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8955565b6000620023037f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806200237257503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b620023c05760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b6040517fad97db1b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015285811660248301526044820185905283151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063ad97db1b906084016020604051808303816000875af115801562002466573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200248c91906200422b565b95945050505050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff163314806200251057503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b6200255e5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063095ea7b3906044016020604051808303816000875af1158015620025f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200261a919062003e47565b62001ed05760405162461bcd60e51b815260206004820152601560248201527f6d67764f666665722f617070726f76652f4661696c00000000000000000000006044820152606401620008a2565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff16331480620026e357503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b620027315760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b7f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8855565b6000620027967f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620028125760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b604080516024810186905260448101859052606480820185905282518083039091018152608490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa7964d4900000000000000000000000000000000000000000000000000000000179052905160009182917f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691620028cf9162003fea565b600060405180830381855af49150503d80600081146200290c576040519150601f19603f3d011682016040523d82523d6000602084013e62002911565b606091505b5091509150816200292d5762002927816200320e565b6200294d565b808060200190518101906200294391906200422b565b9250505062000946565b50509392505050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff163314620029de5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b60007f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb838190557f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8455565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff16331462002ab05760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b817f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8160090180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff938416021790556040517f095ea7b300000000000000000000000000000000000000000000000000000000815283821660048201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248201527f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af115801562002bba573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002be0919062003e47565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801562002c96573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002cbc919062003e47565b5062002cc881620014e8565b60405173ffffffffffffffffffffffffffffffffffffffff831681527fb3be610edf224007ca5faace2cec8684b0e6147124703e9359d544873fca9d379060200160405180910390a15050565b62002d1f620038ba565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff16331462002da75760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620008a2565b50604080518082019091527f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb835481527f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8454602082015290565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009062002ec49073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801562002e93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002eb991906200422b565b8787878787620034e0565b9695505050505050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd290565b7fae7e31c3220e851db9f204a28b279dfe52b973600b0a456991089c220ae7222490565b7f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8190565b600081158062002f5f575073ffffffffffffffffffffffffffffffffffffffff831630145b1562002f6e5750600162000946565b6040805173ffffffffffffffffffffffffffffffffffffffff8581166024830152604480830186905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283929088169162003007919062003fea565b6000604051808303816000865af19150503d806000811462003046576040519150601f19603f3d011682016040523d82523d6000602084013e6200304b565b606091505b509150915081801562002ec457508051158062002ec457508080602001905181019062002ec4919062003e47565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d906024016020604051808303816000875af11580156200310a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003130919062003e47565b6200317e5760405162461bcd60e51b815260206004820152601e60248201527f6d67764f666665722f77697468647261772f7472616e736665724661696c00006044820152606401620008a2565b73ffffffffffffffffffffffffffffffffffffffff83163014620032055760405173ffffffffffffffffffffffffffffffffffffffff8416908390600081818185875af1925050503d8060008114620031f4576040519150601f19603f3d011682016040523d82523d6000602084013e620031f9565b606091505b50508091505062000e31565b50600192915050565b8051600003620032615760405162461bcd60e51b815260206004820152601b60248201527f4d616e676f53746f726167652f7265766572744e6f526561736f6e00000000006044820152606401620008a2565b805160208201fd5b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632fa9b19060e01b85604051602401620032c0919062004269565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516200334b919062003fea565b600060405180830381855af49150503d806000811462003388576040519150601f19603f3d011682016040523d82523d6000602084013e6200338d565b606091505b509150915081620033a357620014bd816200320e565b80806020019051810190620014d9919062003e47565b7f416b48c48a967c2245e6ba6bc6efa281932950b502fea671117e4dfd7d3dfb8a54600090610100900473ffffffffffffffffffffffffffffffffffffffff16818163f2d5d56b6200340f602087018762003c54565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018890526044016020604051808303816000875af115801562003482573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620034a891906200422b565b905084811115620034bf5760009250505062000e31565b620034d6620034cf82876200433b565b85620037b5565b9250505062000e31565b6000808073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663cbf75c9a89896040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9283166004820152911660248201526044016040805180830381865afa15801562003592573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035b8919062004355565b9150915060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635722647b620036028b90565b8a6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff92831660048201529116602482015260448101889052606401602060405180830381865afa1580156200367b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620036a191906200422b565b9050600086604085901c61ffff161115620036c6575061ffff604084901c16620036c9565b50855b62ffffff881115620036fa577fae7e31c3220e851db9f204a28b279dfe52b973600b0a456991089c220ae722245497505b6000816200371262ffffff606087901c168b6200437a565b6200371e919062004395565b6200372e90633b9aca0062004395565b9050600061ffff602085901c166200375762ffffff603087901c811690604888901c166200437a565b62003763919062004395565b6200377390633b9aca0062004395565b90506000620037838e836200437a565b905082811015620037a0576200379a81846200433b565b620037a3565b60005b9e9d5050505050505050505050505050565b600080620037c7602084018462003c54565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa15801562003834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200385a91906200422b565b90508381106200386f57600091505062000e31565b6200387b81856200433b565b91505062000e31565b610c5380620043d683390190565b60405180604001604052806002905b6060815260200190600190039081620038a15790505090565b60405180604001604052806002906020820280368337509192915050565b73ffffffffffffffffffffffffffffffffffffffff81168114620038fb57600080fd5b50565b803562001d2281620038d8565b6000806000606084860312156200392157600080fd5b83356200392e81620038d8565b925060208401356200394081620038d8565b929592945050506040919091013590565b600080604083850312156200396557600080fd5b82356200397281620038d8565b946020939093013593505050565b60008083601f8401126200399357600080fd5b50813567ffffffffffffffff811115620039ac57600080fd5b6020830191508360208260051b8501011115620039c857600080fd5b9250929050565b60008060008060008060a08789031215620039e957600080fd5b863595506020870135945060408701359350606087013567ffffffffffffffff8082111562003a1757600080fd5b81890191508960408301111562003a2d57600080fd5b9093506080880135908082111562003a4457600080fd5b5062003a5389828a0162003980565b979a9699509497509295939492505050565b8015158114620038fb57600080fd5b60006020828403121562003a8757600080fd5b8135620009468162003a65565b6020808252600090606083018382018584805b600281101562003b1e578785037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018452825180518087529087019087870190845b8181101562003b075783518352928901929189019160010162003ae9565b509096505050928501929185019160010162003aa7565b5092979650505050505050565b60006020828403121562003b3e57600080fd5b5035919050565b6000610120828403121562001a4457600080fd5b60008082840361016081121562003b6f57600080fd5b62003b7b858562003b45565b925060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee08201121562003bae57600080fd5b50610120830190509250929050565b6000806020838503121562003bd157600080fd5b823567ffffffffffffffff8082111562003bea57600080fd5b818501915085601f83011262003bff57600080fd5b81358181111562003c0f57600080fd5b86602082850101111562003c2257600080fd5b60209290920196919550909350505050565b6000610120828403121562003c4857600080fd5b62000e2e838362003b45565b60006020828403121562003c6757600080fd5b81356200094681620038d8565b600060e0828403121562001a4457600080fd5b600060e0828403121562003c9a57600080fd5b62000e2e838362003c74565b600080610100838503121562003cbb57600080fd5b62003cc7848462003c74565b9460e0939093013593505050565b6000806000806060858703121562003cec57600080fd5b84359350602085013562003d008162003a65565b9250604085013567ffffffffffffffff81111562003d1d57600080fd5b62003d2b8782880162003980565b95989497509550505050565b6000806000806080858703121562003d4e57600080fd5b843562003d5b81620038d8565b9350602085013562003d6d81620038d8565b925060408501359150606085013562003d868162003a65565b939692955090935050565b60008060006060848603121562003da757600080fd5b505081359360208301359350604090920135919050565b60408101818360005b600281101562003de857815183526020928301929091019060010162003dc7565b50505092915050565b600080600080600060a0868803121562003e0a57600080fd5b853562003e1781620038d8565b9450602086013562003e2981620038d8565b94979496505050506040830135926060810135926080909101359150565b60006020828403121562003e5a57600080fd5b8151620009468162003a65565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111562003e9a57600080fd5b8260051b8083602087013760009401602001938452509192915050565b86815260208082018790526040820186905260a06060830181905260009160e0840191840187845b600281101562003f95577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6087860301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18b360301811262003f4357600080fd5b8a01848101903567ffffffffffffffff81111562003f6057600080fd5b8060051b360382131562003f7357600080fd5b62003f8087828462003e67565b96505050918301919083019060010162003edf565b50505050828103608084015262003fae81858762003e67565b9998505050505050505050565b60005b8381101562003fd857818101518382015260200162003fbe565b838111156200170a5750506000910152565b6000825162003ffe81846020870162003fbb565b9190910192915050565b60208152600082518060208401526200402981604085016020870162003fbb565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715620040b057620040b06200405b565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156200410057620041006200405b565b604052919050565b600060208083850312156200411c57600080fd5b825167ffffffffffffffff808211156200413557600080fd5b8185019150601f86818401126200414b57600080fd5b620041556200408a565b8060408501898111156200416857600080fd5b855b818110156200420c57805186811115620041845760008081fd5b87018581018c13620041965760008081fd5b805187811115620041ab57620041ab6200405b565b8060051b620041bc8b8201620040b6565b9182528281018b01918b8101908f841115620041da57600092508283fd5b938c01935b83851015620041fa5784518252938c0193908c0190620041df565b8852505050938801935087016200416a565b50909998505050505050505050565b8183823760009101908152919050565b6000602082840312156200423e57600080fd5b5051919050565b848152831515602082015260606040820152600062002ec460608301848662003e67565b610120810182356200427b81620038d8565b73ffffffffffffffffffffffffffffffffffffffff168252620042a160208401620038fe565b73ffffffffffffffffffffffffffffffffffffffff811660208401525060408301356040830152606083013560608301526080830135608083015260a083013560a083015260c083013560c083015260e083013560e083015261010080840135818401525092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156200435057620043506200430c565b500390565b600080604083850312156200436957600080fd5b505080516020909101519092909150565b600082198211156200439057620043906200430c565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620043d057620043d06200430c565b50029056fe60c060405234801561001057600080fd5b50604051610c53380380610c5383398101604081905261002f91610107565b806001600160a01b03811661008a5760405162461bcd60e51b815260206004820152601860248201527f616363657373436f6e74726f6c6c65642f307841646d696e0000000000000000604482015260640160405180910390fd5b8061009d6100c760201b6107161760201c565b80546001600160a01b0319166001600160a01b0392831617905592831660a052501660805261013a565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd290565b80516001600160a01b038116811461010257600080fd5b919050565b6000806040838503121561011a57600080fd5b610123836100eb565b9150610131602084016100eb565b90509250929050565b60805160a051610abd61019660003960008181608701528181610195015281816102c80152818161036b015281816105f401526106d80152600081816101210152818161038c0152818161057301526106b70152610abd6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063e3d670d71161005b578063e3d670d7146100fb578063f230b4c21461011c578063f2d5d56b14610143578063f851a4401461015657600080fd5b806317eaf7121461008257806348897c52146100d3578063704b6c02146100e8575b600080fd5b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100e66100e1366004610899565b610193565b005b6100e66100f6366004610933565b610430565b61010e610109366004610933565b610536565b6040519081526020016100ca565b6100a97f000000000000000000000000000000000000000000000000000000000000000081565b61010e610151366004610957565b6105f0565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff166100a9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811615806101ec57503373ffffffffffffffffffffffffffffffffffffffff8216145b610257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c6964000000000000000060448201526064015b60405180910390fd5b60005b8281101561042a57600084848381811061027657610276610983565b905060200201602081019061028b9190610933565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015291909116906370a0823190602401602060405180830381865afa158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d91906109b2565b90506103b185858481811061035457610354610983565b90506020020160208101906103699190610933565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008461073a565b610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f454f41536f75726365722f666c7573682f7472616e736665724661696c000000604482015260640161024e565b5080610422816109cb565b91505061025a565b50505050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd25473ffffffffffffffffffffffffffffffffffffffff1633146104d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c69640000000000000000604482015260640161024e565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152600091908316906370a0823190602401602060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea91906109b2565b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8116158061064b57503373ffffffffffffffffffffffffffffffffffffffff8216145b6106b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c69640000000000000000604482015260640161024e565b6106fd847f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008661073a565b1561070b576000915061070f565b8291505b5092915050565b7f7d382ebca3e46505071795e192d28166a3d4bd0685585591bc6c5b8df6769fd290565b600081158061077457508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561078157506001610891565b6040805173ffffffffffffffffffffffffffffffffffffffff86811660248301528581166044830152606480830186905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905291516000928392908916916108209190610a2a565b6000604051808303816000865af19150503d806000811461085d576040519150601f19603f3d011682016040523d82523d6000602084013e610862565b606091505b509150915081801561088c57508051158061088c57508080602001905181019061088c9190610a65565b925050505b949350505050565b600080602083850312156108ac57600080fd5b823567ffffffffffffffff808211156108c457600080fd5b818501915085601f8301126108d857600080fd5b8135818111156108e757600080fd5b8660208260051b85010111156108fc57600080fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461093057600080fd5b50565b60006020828403121561094557600080fd5b81356109508161090e565b9392505050565b6000806040838503121561096a57600080fd5b82356109758161090e565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156109c457600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a23577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b6000825160005b81811015610a4b5760208186018101518583015201610a31565b81811115610a5a576000828501525b509190910192915050565b600060208284031215610a7757600080fd5b8151801515811461095057600080fdfea26469706673582212200535763aaff4477b2aa72b098de6d97ce6de3888105f8974826557dc4cdf26e564736f6c634300080e0033a264697066735822122011288046090bc5cf38d00570f68ad7a55caa0f7acac403234e78581732e85d8164736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogIncident(address,address,uint256,bytes32)": {
        "notice": "Events "
      }
    },
    "kind": "user",
    "methods": {
      "approveMangrove(address,uint256)": {
        "notice": "`this` contract needs to approve Mangrove to let it perform outbound token transfer at the end of the `makerExecute` function NB if anyone can call this function someone could reset it to 0 for griefing"
      },
      "delta()": {
        "notice": "Setters and getters "
      },
      "set_liquidity_sourcer(address,uint256)": {
        "notice": "NB Sourcer might need further approval to work as intended"
      },
      "set_shift(int256,bool,uint256[])": {
        "notice": "New positions 0<= i < s are initialized with amount[i] in base tokens if `withBase`. In quote tokens otherwise"
      },
      "withdrawFromMangrove(address,uint256)": {
        "notice": "withdraws ETH from the bounty vault of the Mangrove. ETH are sent to `receiver`"
      },
      "withdrawToken(address,address,uint256)": {
        "notice": "transfers token stored in `this` contract to some recipient address"
      }
    },
    "notice": "In case of a partial fill of an offer at position i, the offer residual is reposted (see `Persistent` strat class)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
